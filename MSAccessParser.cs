//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\stena\RiderProjects\NppDB\NppDB.MSAccess\MSAccessParser.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MSAccessParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, OPEN_BRACKET=5, CLOSE_BRACKET=6, 
		COMMA=7, STAR=8, PLUS=9, MINUS=10, PIPE2=11, DIV=12, IDIV=13, MOD_=14, 
		LT2=15, GT2=16, AMP=17, PIPE=18, LT=19, LT_EQ=20, GT=21, GT_EQ=22, EQ=23, 
		NOT_EQ1=24, NOT_EQ2=25, ADD_=26, ALL_=27, ALTER_=28, AND_=29, ANY_=30, 
		AS_=31, ASC_=32, BEGIN_=33, BETWEEN_=34, BY_=35, CASCADE_=36, CASE_=37, 
		CAST_=38, CHECK_=39, COLUMN_=40, COMMIT_=41, COMP_=42, COMPRESSION_=43, 
		CONSTRAINT_=44, CREATE_=45, CURRENT_DATE_=46, CURRENT_TIME_=47, CURRENT_TIMESTAMP_=48, 
		DATABASE_=49, DEFAULT_=50, DELETE_=51, DESC_=52, DISALLOW_=53, DISTINCT_=54, 
		DISTINCTROW_=55, DROP_=56, ELSE_=57, END_=58, EQV_=59, ESCAPE_=60, EXCEPT_=61, 
		EXEC_=62, EXISTS_=63, FOREIGN_=64, FROM_=65, GROUP_=66, HAVING_=67, IGNORE_=68, 
		IN_=69, INDEX_=70, INDEXED_=71, INNER_=72, INSERT_=73, INTERSECT_=74, 
		INTO_=75, IS_=76, JOIN_=77, KEY_=78, LEFT_=79, ALIKE_=80, LIKE_=81, TOP_=82, 
		MATCH_=83, MINUS_=84, NO_=85, NOT_=86, NULL_=87, ON_=88, OR_=89, ORDER_=90, 
		OUTER_=91, PARAMETERS_=92, PASSWORD_=93, PRIMARY_=94, PROC_=95, PROCEDURE_=96, 
		REFERENCES_=97, REGEXP_=98, RIGHT_=99, ROLLBACK_=100, SELECT_=101, SET_=102, 
		SOME_=103, TABLE_=104, TEMP_=105, TEMPORARY_=106, THEN_=107, TO_=108, 
		TRANSACTION_=109, USER_=110, WORK_=111, UNION_=112, UNIQUE_=113, UPDATE_=114, 
		VALUES_=115, VIEW_=116, WHEN_=117, WHERE_=118, WITH_=119, XOR_=120, TRUE_=121, 
		FALSE_=122, NULLS_=123, FIRST_=124, LAST_=125, OBJECT_=126, CONTAINER_=127, 
		GRANT_=128, REVOKE_=129, SELECTSECURITY_=130, UPDATESECURITY_=131, DBPASSWORD_=132, 
		UPDATEIDENTITY_=133, SELECTSCHEMA_=134, SCHEMA_=135, UPDATEOWNER_=136, 
		LONGBINARY_=137, BINARY_=138, BIT_=139, COUNTER_=140, CURRENCY_=141, DATE_=142, 
		TIME_=143, DATETIME_=144, TIMESTAMP_=145, GUID_=146, LONGTEXT_=147, SINGLE_=148, 
		DOUBLE_=149, UNSIGNED_=150, BYTE_=151, SHORT_=152, INTEGER_=153, LONG_=154, 
		NUMERIC_=155, VARCHAR_=156, VARBINARY_=157, YESNO_=158, TEXT_=159, REPLICATIONID_=160, 
		AUTONUMBER_=161, OLEOBJECT_=162, MEMO_=163, HYPERLINK_=164, PERCENT_=165, 
		IDENTIFIER=166, NUMERIC_LITERAL=167, BIND_PARAMETER=168, STRING_LITERAL=169, 
		DATE_LITERAL=170, BLOB_LITERAL=171, SINGLE_LINE_COMMENT=172, MULTILINE_COMMENT=173, 
		SPACES=174, UNEXPECTED_CHAR=175;
	public const int
		RULE_keyword = 0, RULE_privilege = 1, RULE_type_name = 2, RULE_literal_expr = 3, 
		RULE_column_alias = 4, RULE_any_name = 5, RULE_name = 6, RULE_function_name = 7, 
		RULE_table_name = 8, RULE_column_name = 9, RULE_index_name = 10, RULE_procedure_name = 11, 
		RULE_param_name = 12, RULE_view_name = 13, RULE_table_alias = 14, RULE_aliased_table_name = 15, 
		RULE_direction = 16, RULE_ordering_term = 17, RULE_signed_number = 18, 
		RULE_param_def = 19, RULE_optional_parens = 20, RULE_default_expr = 21, 
		RULE_column_def = 22, RULE_prefixed_star = 23, RULE_prefixed_column_name = 24, 
		RULE_result_column = 25, RULE_param_expr = 26, RULE_user_name = 27, RULE_group_name = 28, 
		RULE_user_or_group_name = 29, RULE_password = 30, RULE_pid = 31, RULE_expr = 32, 
		RULE_function_expr = 33, RULE_create_user_stmt = 34, RULE_create_group_stmt = 35, 
		RULE_drop_user_stmt = 36, RULE_drop_group_stmt = 37, RULE_alter_password_stmt = 38, 
		RULE_add_user_stmt = 39, RULE_grant_stmt = 40, RULE_revoke_stmt = 41, 
		RULE_alter_table_stmt = 42, RULE_begin_stmt = 43, RULE_commit_stmt = 44, 
		RULE_rollback_stmt = 45, RULE_on_trigger = 46, RULE_single_field_constraint = 47, 
		RULE_multiple_field_constraint = 48, RULE_exec_stmt = 49, RULE_create_table_stmt = 50, 
		RULE_create_view_stmt = 51, RULE_create_index_stmt = 52, RULE_create_procedure_stmt = 53, 
		RULE_drop_stmt = 54, RULE_select_stmt = 55, RULE_table_stmt = 56, RULE_table_core_stmt = 57, 
		RULE_select_clause = 58, RULE_select_into_stmt = 59, RULE_select_core_stmt = 60, 
		RULE_table_or_subquery = 61, RULE_table_with_joins = 62, RULE_from_clause = 63, 
		RULE_join_clause = 64, RULE_where_clause = 65, RULE_group_by_clause = 66, 
		RULE_order_by_clause = 67, RULE_insert_stmt = 68, RULE_update_stmt = 69, 
		RULE_delete_stmt = 70, RULE_procedure_stmt = 71, RULE_parameters_stmt = 72, 
		RULE_sql_stmt = 73, RULE_sql_stmt_list = 74, RULE_parse = 75;
	public static readonly string[] ruleNames = {
		"keyword", "privilege", "type_name", "literal_expr", "column_alias", "any_name", 
		"name", "function_name", "table_name", "column_name", "index_name", "procedure_name", 
		"param_name", "view_name", "table_alias", "aliased_table_name", "direction", 
		"ordering_term", "signed_number", "param_def", "optional_parens", "default_expr", 
		"column_def", "prefixed_star", "prefixed_column_name", "result_column", 
		"param_expr", "user_name", "group_name", "user_or_group_name", "password", 
		"pid", "expr", "function_expr", "create_user_stmt", "create_group_stmt", 
		"drop_user_stmt", "drop_group_stmt", "alter_password_stmt", "add_user_stmt", 
		"grant_stmt", "revoke_stmt", "alter_table_stmt", "begin_stmt", "commit_stmt", 
		"rollback_stmt", "on_trigger", "single_field_constraint", "multiple_field_constraint", 
		"exec_stmt", "create_table_stmt", "create_view_stmt", "create_index_stmt", 
		"create_procedure_stmt", "drop_stmt", "select_stmt", "table_stmt", "table_core_stmt", 
		"select_clause", "select_into_stmt", "select_core_stmt", "table_or_subquery", 
		"table_with_joins", "from_clause", "join_clause", "where_clause", "group_by_clause", 
		"order_by_clause", "insert_stmt", "update_stmt", "delete_stmt", "procedure_stmt", 
		"parameters_stmt", "sql_stmt", "sql_stmt_list", "parse"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "'['", "']'", "','", "'*'", "'+'", "'-'", 
		"'||'", "'/'", "'\\'", "'MOD'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", 
		"'>'", "'>='", "'='", "'!='", "'<>'", "'ADD'", "'ALL'", "'ALTER'", "'AND'", 
		"'ANY'", "'AS'", "'ASC'", "'BEGIN'", "'BETWEEN'", "'BY'", "'CASCADE'", 
		"'CASE'", "'CAST'", "'CHECK'", "'COLUMN'", "'COMMIT'", "'COMP'", "'COMPRESSION'", 
		"'CONSTRAINT'", "'CREATE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
		"'DATABASE'", "'DEFAULT'", "'DELETE'", "'DESC'", "'DISALLOW'", "'DISTINCT'", 
		"'DISTINCTROW'", "'DROP'", "'ELSE'", "'END'", "'EQV'", "'ESCAPE'", "'EXCEPT'", 
		"'EXEC'", "'EXISTS'", "'FOREIGN'", "'FROM'", "'GROUP'", "'HAVING'", "'IGNORE'", 
		"'IN'", "'INDEX'", "'INDEXED'", "'INNER'", "'INSERT'", "'INTERSECT'", 
		"'INTO'", "'IS'", "'JOIN'", "'KEY'", "'LEFT'", "'ALIKE'", "'LIKE'", "'TOP'", 
		"'MATCH'", "'MINUS'", "'NO'", "'NOT'", "'NULL'", "'ON'", "'OR'", "'ORDER'", 
		"'OUTER'", "'PARAMETERS'", "'PASSWORD'", "'PRIMARY'", "'PROC'", "'PROCEDURE'", 
		"'REFERENCES'", "'REGEXP'", "'RIGHT'", "'ROLLBACK'", "'SELECT'", "'SET'", 
		"'SOME'", "'TABLE'", "'TEMP'", "'TEMPORARY'", "'THEN'", "'TO'", "'TRANSACTION'", 
		"'USER'", "'WORK'", "'UNION'", "'UNIQUE'", "'UPDATE'", "'VALUES'", "'VIEW'", 
		"'WHEN'", "'WHERE'", "'WITH'", "'XOR'", "'TRUE'", "'FALSE'", "'NULLS'", 
		"'FIRST'", "'LAST'", "'OBJECT'", "'CONTAINER'", "'GRANT'", "'REVOKE'", 
		"'SELECTSECURITY'", "'UPDATESECURITY'", "'DBPASSWORD'", "'UPDATEIDENTITY'", 
		"'SELECTSCHEMA'", "'SCHEMA'", "'UPDATEOWNER'", "'LONGBINARY'", "'BINARY'", 
		"'BIT'", "'COUNTER'", "'CURRENCY'", "'DATE'", "'TIME'", "'DATETIME'", 
		"'TIMESTAMP'", "'GUID'", "'LONGTEXT'", "'SINGLE'", "'DOUBLE'", "'UNSIGNED'", 
		"'BYTE'", "'SHORT'", "'INTEGER'", "'LONG'", "'NUMERIC'", "'VARCHAR'", 
		"'VARBINARY'", "'YESNO'", "'TEXT'", "'REPLICATIONID'", "'AUTONUMBER'", 
		"'OLEOBJECT'", "'MEMO'", "'HYPERLINK'", "'PERCENT'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"COMMA", "STAR", "PLUS", "MINUS", "PIPE2", "DIV", "IDIV", "MOD_", "LT2", 
		"GT2", "AMP", "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
		"ADD_", "ALL_", "ALTER_", "AND_", "ANY_", "AS_", "ASC_", "BEGIN_", "BETWEEN_", 
		"BY_", "CASCADE_", "CASE_", "CAST_", "CHECK_", "COLUMN_", "COMMIT_", "COMP_", 
		"COMPRESSION_", "CONSTRAINT_", "CREATE_", "CURRENT_DATE_", "CURRENT_TIME_", 
		"CURRENT_TIMESTAMP_", "DATABASE_", "DEFAULT_", "DELETE_", "DESC_", "DISALLOW_", 
		"DISTINCT_", "DISTINCTROW_", "DROP_", "ELSE_", "END_", "EQV_", "ESCAPE_", 
		"EXCEPT_", "EXEC_", "EXISTS_", "FOREIGN_", "FROM_", "GROUP_", "HAVING_", 
		"IGNORE_", "IN_", "INDEX_", "INDEXED_", "INNER_", "INSERT_", "INTERSECT_", 
		"INTO_", "IS_", "JOIN_", "KEY_", "LEFT_", "ALIKE_", "LIKE_", "TOP_", "MATCH_", 
		"MINUS_", "NO_", "NOT_", "NULL_", "ON_", "OR_", "ORDER_", "OUTER_", "PARAMETERS_", 
		"PASSWORD_", "PRIMARY_", "PROC_", "PROCEDURE_", "REFERENCES_", "REGEXP_", 
		"RIGHT_", "ROLLBACK_", "SELECT_", "SET_", "SOME_", "TABLE_", "TEMP_", 
		"TEMPORARY_", "THEN_", "TO_", "TRANSACTION_", "USER_", "WORK_", "UNION_", 
		"UNIQUE_", "UPDATE_", "VALUES_", "VIEW_", "WHEN_", "WHERE_", "WITH_", 
		"XOR_", "TRUE_", "FALSE_", "NULLS_", "FIRST_", "LAST_", "OBJECT_", "CONTAINER_", 
		"GRANT_", "REVOKE_", "SELECTSECURITY_", "UPDATESECURITY_", "DBPASSWORD_", 
		"UPDATEIDENTITY_", "SELECTSCHEMA_", "SCHEMA_", "UPDATEOWNER_", "LONGBINARY_", 
		"BINARY_", "BIT_", "COUNTER_", "CURRENCY_", "DATE_", "TIME_", "DATETIME_", 
		"TIMESTAMP_", "GUID_", "LONGTEXT_", "SINGLE_", "DOUBLE_", "UNSIGNED_", 
		"BYTE_", "SHORT_", "INTEGER_", "LONG_", "NUMERIC_", "VARCHAR_", "VARBINARY_", 
		"YESNO_", "TEXT_", "REPLICATIONID_", "AUTONUMBER_", "OLEOBJECT_", "MEMO_", 
		"HYPERLINK_", "PERCENT_", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
		"STRING_LITERAL", "DATE_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
		"MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MSAccessParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MSAccessParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MSAccessParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MSAccessParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_() { return GetToken(MSAccessParser.ADD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_() { return GetToken(MSAccessParser.ALL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_() { return GetToken(MSAccessParser.ALTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_() { return GetToken(MSAccessParser.AND_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(MSAccessParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_() { return GetToken(MSAccessParser.ASC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_() { return GetToken(MSAccessParser.BEGIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_() { return GetToken(MSAccessParser.BETWEEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(MSAccessParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_() { return GetToken(MSAccessParser.CASCADE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_() { return GetToken(MSAccessParser.CASE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST_() { return GetToken(MSAccessParser.CAST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_() { return GetToken(MSAccessParser.CHECK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_() { return GetToken(MSAccessParser.COLUMN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_() { return GetToken(MSAccessParser.COMMIT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP_() { return GetToken(MSAccessParser.COMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_() { return GetToken(MSAccessParser.COMPRESSION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_() { return GetToken(MSAccessParser.CONSTRAINT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINER_() { return GetToken(MSAccessParser.CONTAINER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(MSAccessParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE_() { return GetToken(MSAccessParser.CURRENT_DATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME_() { return GetToken(MSAccessParser.CURRENT_TIME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP_() { return GetToken(MSAccessParser.CURRENT_TIMESTAMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_() { return GetToken(MSAccessParser.DATABASE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_() { return GetToken(MSAccessParser.DEFAULT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_() { return GetToken(MSAccessParser.DELETE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_() { return GetToken(MSAccessParser.DESC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISALLOW_() { return GetToken(MSAccessParser.DISALLOW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_() { return GetToken(MSAccessParser.DISTINCT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTROW_() { return GetToken(MSAccessParser.DISTINCTROW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_() { return GetToken(MSAccessParser.DROP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_() { return GetToken(MSAccessParser.ELSE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_() { return GetToken(MSAccessParser.END_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQV_() { return GetToken(MSAccessParser.EQV_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_() { return GetToken(MSAccessParser.ESCAPE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_() { return GetToken(MSAccessParser.EXCEPT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(MSAccessParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_() { return GetToken(MSAccessParser.FOREIGN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_() { return GetToken(MSAccessParser.FROM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_() { return GetToken(MSAccessParser.GRANT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_() { return GetToken(MSAccessParser.GROUP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING_() { return GetToken(MSAccessParser.HAVING_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_() { return GetToken(MSAccessParser.IGNORE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_() { return GetToken(MSAccessParser.IN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_() { return GetToken(MSAccessParser.INDEX_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED_() { return GetToken(MSAccessParser.INDEXED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_() { return GetToken(MSAccessParser.INNER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_() { return GetToken(MSAccessParser.INSERT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT_() { return GetToken(MSAccessParser.INTERSECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_() { return GetToken(MSAccessParser.INTO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_() { return GetToken(MSAccessParser.IS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_() { return GetToken(MSAccessParser.JOIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_() { return GetToken(MSAccessParser.KEY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_() { return GetToken(MSAccessParser.LEFT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIKE_() { return GetToken(MSAccessParser.ALIKE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_() { return GetToken(MSAccessParser.LIKE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP_() { return GetToken(MSAccessParser.TOP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_() { return GetToken(MSAccessParser.MATCH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_() { return GetToken(MSAccessParser.MINUS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_() { return GetToken(MSAccessParser.NO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(MSAccessParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(MSAccessParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_() { return GetToken(MSAccessParser.OBJECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(MSAccessParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_() { return GetToken(MSAccessParser.OR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_() { return GetToken(MSAccessParser.ORDER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_() { return GetToken(MSAccessParser.OUTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERS_() { return GetToken(MSAccessParser.PARAMETERS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_() { return GetToken(MSAccessParser.PASSWORD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_() { return GetToken(MSAccessParser.PRIMARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_() { return GetToken(MSAccessParser.PROCEDURE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_() { return GetToken(MSAccessParser.REFERENCES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_() { return GetToken(MSAccessParser.REGEXP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE_() { return GetToken(MSAccessParser.REVOKE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_() { return GetToken(MSAccessParser.RIGHT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_() { return GetToken(MSAccessParser.ROLLBACK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_() { return GetToken(MSAccessParser.SELECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_() { return GetToken(MSAccessParser.SET_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(MSAccessParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP_() { return GetToken(MSAccessParser.TEMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_() { return GetToken(MSAccessParser.TEMPORARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_() { return GetToken(MSAccessParser.THEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_() { return GetToken(MSAccessParser.TO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_() { return GetToken(MSAccessParser.TRANSACTION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_() { return GetToken(MSAccessParser.USER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_() { return GetToken(MSAccessParser.WORK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_() { return GetToken(MSAccessParser.UNION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_() { return GetToken(MSAccessParser.UNIQUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_() { return GetToken(MSAccessParser.UPDATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_() { return GetToken(MSAccessParser.VALUES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_() { return GetToken(MSAccessParser.VIEW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN_() { return GetToken(MSAccessParser.WHEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(MSAccessParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_() { return GetToken(MSAccessParser.WITH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_() { return GetToken(MSAccessParser.XOR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_() { return GetToken(MSAccessParser.TRUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_() { return GetToken(MSAccessParser.FALSE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_() { return GetToken(MSAccessParser.NULLS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_() { return GetToken(MSAccessParser.FIRST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_() { return GetToken(MSAccessParser.LAST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTSECURITY_() { return GetToken(MSAccessParser.SELECTSECURITY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATESECURITY_() { return GetToken(MSAccessParser.UPDATESECURITY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBPASSWORD_() { return GetToken(MSAccessParser.DBPASSWORD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATEIDENTITY_() { return GetToken(MSAccessParser.UPDATEIDENTITY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTSCHEMA_() { return GetToken(MSAccessParser.SELECTSCHEMA_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_() { return GetToken(MSAccessParser.SCHEMA_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATEOWNER_() { return GetToken(MSAccessParser.UPDATEOWNER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBINARY_() { return GetToken(MSAccessParser.LONGBINARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_() { return GetToken(MSAccessParser.BINARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_() { return GetToken(MSAccessParser.BIT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTER_() { return GetToken(MSAccessParser.COUNTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENCY_() { return GetToken(MSAccessParser.CURRENCY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_() { return GetToken(MSAccessParser.DATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_() { return GetToken(MSAccessParser.TIME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_() { return GetToken(MSAccessParser.DATETIME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_() { return GetToken(MSAccessParser.TIMESTAMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUID_() { return GetToken(MSAccessParser.GUID_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT_() { return GetToken(MSAccessParser.LONGTEXT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_() { return GetToken(MSAccessParser.SINGLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_() { return GetToken(MSAccessParser.DOUBLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_() { return GetToken(MSAccessParser.UNSIGNED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_() { return GetToken(MSAccessParser.BYTE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT_() { return GetToken(MSAccessParser.SHORT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_() { return GetToken(MSAccessParser.INTEGER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_() { return GetToken(MSAccessParser.LONG_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_() { return GetToken(MSAccessParser.NUMERIC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR_() { return GetToken(MSAccessParser.VARCHAR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY_() { return GetToken(MSAccessParser.VARBINARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YESNO_() { return GetToken(MSAccessParser.YESNO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_() { return GetToken(MSAccessParser.TEXT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATIONID_() { return GetToken(MSAccessParser.REPLICATIONID_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTONUMBER_() { return GetToken(MSAccessParser.AUTONUMBER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLEOBJECT_() { return GetToken(MSAccessParser.OLEOBJECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMO_() { return GetToken(MSAccessParser.MEMO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPERLINK_() { return GetToken(MSAccessParser.HYPERLINK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_() { return GetToken(MSAccessParser.PERCENT_, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 0, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686019568238592L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -551903297537L) != 0 || (((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 274877906943L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_() { return GetToken(MSAccessParser.SELECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_() { return GetToken(MSAccessParser.DELETE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_() { return GetToken(MSAccessParser.INSERT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_() { return GetToken(MSAccessParser.UPDATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(MSAccessParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_() { return GetToken(MSAccessParser.DROP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTSECURITY_() { return GetToken(MSAccessParser.SELECTSECURITY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATESECURITY_() { return GetToken(MSAccessParser.UPDATESECURITY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DBPASSWORD_() { return GetToken(MSAccessParser.DBPASSWORD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATEIDENTITY_() { return GetToken(MSAccessParser.UPDATEIDENTITY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECTSCHEMA_() { return GetToken(MSAccessParser.SELECTSCHEMA_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_() { return GetToken(MSAccessParser.SCHEMA_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATEOWNER_() { return GetToken(MSAccessParser.UPDATEOWNER_, 0); }
		public PrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitPrivilege(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeContext privilege() {
		PrivilegeContext _localctx = new PrivilegeContext(Context, State);
		EnterRule(_localctx, 2, RULE_privilege);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 74344578223702016L) != 0 || (((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & -144112988784164863L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBINARY_() { return GetToken(MSAccessParser.LONGBINARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_() { return GetToken(MSAccessParser.BINARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_() { return GetToken(MSAccessParser.BIT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNTER_() { return GetToken(MSAccessParser.COUNTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENCY_() { return GetToken(MSAccessParser.CURRENCY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_() { return GetToken(MSAccessParser.DATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_() { return GetToken(MSAccessParser.TIME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_() { return GetToken(MSAccessParser.DATETIME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_() { return GetToken(MSAccessParser.TIMESTAMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUID_() { return GetToken(MSAccessParser.GUID_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT_() { return GetToken(MSAccessParser.LONGTEXT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_() { return GetToken(MSAccessParser.SINGLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_() { return GetToken(MSAccessParser.DOUBLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_() { return GetToken(MSAccessParser.UNSIGNED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_() { return GetToken(MSAccessParser.BYTE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHORT_() { return GetToken(MSAccessParser.SHORT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER_() { return GetToken(MSAccessParser.INTEGER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_() { return GetToken(MSAccessParser.LONG_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_() { return GetToken(MSAccessParser.NUMERIC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR_() { return GetToken(MSAccessParser.VARCHAR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY_() { return GetToken(MSAccessParser.VARBINARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YESNO_() { return GetToken(MSAccessParser.YESNO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_() { return GetToken(MSAccessParser.TEXT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATIONID_() { return GetToken(MSAccessParser.REPLICATIONID_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTONUMBER_() { return GetToken(MSAccessParser.AUTONUMBER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLEOBJECT_() { return GetToken(MSAccessParser.OLEOBJECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMO_() { return GetToken(MSAccessParser.MEMO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HYPERLINK_() { return GetToken(MSAccessParser.HYPERLINK_, 0); }
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 4, RULE_type_name);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LONGBINARY_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				Match(LONGBINARY_);
				}
				break;
			case BINARY_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157;
				Match(BINARY_);
				}
				break;
			case BIT_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 158;
				Match(BIT_);
				}
				break;
			case COUNTER_:
				EnterOuterAlt(_localctx, 4);
				{
				State = 159;
				Match(COUNTER_);
				}
				break;
			case CURRENCY_:
				EnterOuterAlt(_localctx, 5);
				{
				State = 160;
				Match(CURRENCY_);
				}
				break;
			case DATE_:
				EnterOuterAlt(_localctx, 6);
				{
				State = 161;
				Match(DATE_);
				}
				break;
			case TIME_:
				EnterOuterAlt(_localctx, 7);
				{
				State = 162;
				Match(TIME_);
				}
				break;
			case DATETIME_:
				EnterOuterAlt(_localctx, 8);
				{
				State = 163;
				Match(DATETIME_);
				}
				break;
			case TIMESTAMP_:
				EnterOuterAlt(_localctx, 9);
				{
				State = 164;
				Match(TIMESTAMP_);
				}
				break;
			case GUID_:
				EnterOuterAlt(_localctx, 10);
				{
				State = 165;
				Match(GUID_);
				}
				break;
			case LONGTEXT_:
				EnterOuterAlt(_localctx, 11);
				{
				State = 166;
				Match(LONGTEXT_);
				}
				break;
			case SINGLE_:
				EnterOuterAlt(_localctx, 12);
				{
				State = 167;
				Match(SINGLE_);
				}
				break;
			case DOUBLE_:
				EnterOuterAlt(_localctx, 13);
				{
				State = 168;
				Match(DOUBLE_);
				}
				break;
			case UNSIGNED_:
				EnterOuterAlt(_localctx, 14);
				{
				State = 169;
				Match(UNSIGNED_);
				State = 170;
				Match(BYTE_);
				}
				break;
			case SHORT_:
				EnterOuterAlt(_localctx, 15);
				{
				State = 171;
				Match(SHORT_);
				}
				break;
			case INTEGER_:
				EnterOuterAlt(_localctx, 16);
				{
				State = 172;
				Match(INTEGER_);
				}
				break;
			case LONG_:
				EnterOuterAlt(_localctx, 17);
				{
				State = 173;
				Match(LONG_);
				}
				break;
			case NUMERIC_:
				EnterOuterAlt(_localctx, 18);
				{
				State = 174;
				Match(NUMERIC_);
				}
				break;
			case VARCHAR_:
				EnterOuterAlt(_localctx, 19);
				{
				State = 175;
				Match(VARCHAR_);
				}
				break;
			case VARBINARY_:
				EnterOuterAlt(_localctx, 20);
				{
				State = 176;
				Match(VARBINARY_);
				}
				break;
			case YESNO_:
				EnterOuterAlt(_localctx, 21);
				{
				State = 177;
				Match(YESNO_);
				}
				break;
			case TEXT_:
				EnterOuterAlt(_localctx, 22);
				{
				State = 178;
				Match(TEXT_);
				}
				break;
			case REPLICATIONID_:
				EnterOuterAlt(_localctx, 23);
				{
				State = 179;
				Match(REPLICATIONID_);
				}
				break;
			case AUTONUMBER_:
				EnterOuterAlt(_localctx, 24);
				{
				State = 180;
				Match(AUTONUMBER_);
				}
				break;
			case OLEOBJECT_:
				EnterOuterAlt(_localctx, 25);
				{
				State = 181;
				Match(OLEOBJECT_);
				}
				break;
			case MEMO_:
				EnterOuterAlt(_localctx, 26);
				{
				State = 182;
				Match(MEMO_);
				}
				break;
			case HYPERLINK_:
				EnterOuterAlt(_localctx, 27);
				{
				State = 183;
				Match(HYPERLINK_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_exprContext : ParserRuleContext {
		public IToken literal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(MSAccessParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MSAccessParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_LITERAL() { return GetToken(MSAccessParser.DATE_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB_LITERAL() { return GetToken(MSAccessParser.BLOB_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(MSAccessParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_() { return GetToken(MSAccessParser.TRUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_() { return GetToken(MSAccessParser.FALSE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIME_() { return GetToken(MSAccessParser.CURRENT_TIME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_DATE_() { return GetToken(MSAccessParser.CURRENT_DATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_TIMESTAMP_() { return GetToken(MSAccessParser.CURRENT_TIMESTAMP_, 0); }
		public Literal_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterLiteral_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitLiteral_expr(this);
		}
	}

	[RuleVersion(0)]
	public Literal_exprContext literal_expr() {
		Literal_exprContext _localctx = new Literal_exprContext(Context, State);
		EnterRule(_localctx, 6, RULE_literal_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186;
			_localctx.literal = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & 2199023255559L) != 0 || (((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & 2040693581152259L) != 0) ) {
				_localctx.literal = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MSAccessParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MSAccessParser.STRING_LITERAL, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 8, RULE_column_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==STRING_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MSAccessParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MSAccessParser.STRING_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_any_name);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190;
				Match(IDENTIFIER);
				}
				break;
			case ADD_:
			case ALL_:
			case ALTER_:
			case AND_:
			case AS_:
			case ASC_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLUMN_:
			case COMMIT_:
			case COMP_:
			case COMPRESSION_:
			case CONSTRAINT_:
			case CREATE_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DELETE_:
			case DESC_:
			case DISALLOW_:
			case DISTINCT_:
			case DISTINCTROW_:
			case DROP_:
			case ELSE_:
			case END_:
			case EQV_:
			case ESCAPE_:
			case EXCEPT_:
			case EXISTS_:
			case FOREIGN_:
			case FROM_:
			case GROUP_:
			case HAVING_:
			case IGNORE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INNER_:
			case INSERT_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case ALIKE_:
			case LIKE_:
			case TOP_:
			case MATCH_:
			case MINUS_:
			case NO_:
			case NOT_:
			case NULL_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PARAMETERS_:
			case PASSWORD_:
			case PRIMARY_:
			case PROCEDURE_:
			case REFERENCES_:
			case REGEXP_:
			case RIGHT_:
			case ROLLBACK_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case USER_:
			case WORK_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case VALUES_:
			case VIEW_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case XOR_:
			case TRUE_:
			case FALSE_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case OBJECT_:
			case CONTAINER_:
			case GRANT_:
			case REVOKE_:
			case SELECTSECURITY_:
			case UPDATESECURITY_:
			case DBPASSWORD_:
			case UPDATEIDENTITY_:
			case SELECTSCHEMA_:
			case SCHEMA_:
			case UPDATEOWNER_:
			case LONGBINARY_:
			case BINARY_:
			case BIT_:
			case COUNTER_:
			case CURRENCY_:
			case DATE_:
			case TIME_:
			case DATETIME_:
			case TIMESTAMP_:
			case GUID_:
			case LONGTEXT_:
			case SINGLE_:
			case DOUBLE_:
			case UNSIGNED_:
			case BYTE_:
			case SHORT_:
			case INTEGER_:
			case LONG_:
			case NUMERIC_:
			case VARCHAR_:
			case VARBINARY_:
			case YESNO_:
			case TEXT_:
			case REPLICATIONID_:
			case AUTONUMBER_:
			case OLEOBJECT_:
			case MEMO_:
			case HYPERLINK_:
			case PERCENT_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191;
				keyword();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192;
				Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 193;
				Match(OPEN_PAR);
				State = 194;
				any_name();
				State = 195;
				Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 12, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 14, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 16, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 18, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterIndex_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitIndex_name(this);
		}
	}

	[RuleVersion(0)]
	public Index_nameContext index_name() {
		Index_nameContext _localctx = new Index_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_index_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterProcedure_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitProcedure_name(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_nameContext procedure_name() {
		Procedure_nameContext _localctx = new Procedure_nameContext(Context, State);
		EnterRule(_localctx, 22, RULE_procedure_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterParam_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitParam_name(this);
		}
	}

	[RuleVersion(0)]
	public Param_nameContext param_name() {
		Param_nameContext _localctx = new Param_nameContext(Context, State);
		EnterRule(_localctx, 24, RULE_param_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class View_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_view_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterView_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitView_name(this);
		}
	}

	[RuleVersion(0)]
	public View_nameContext view_name() {
		View_nameContext _localctx = new View_nameContext(Context, State);
		EnterRule(_localctx, 26, RULE_view_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 28, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Aliased_table_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(MSAccessParser.AS_, 0); }
		public Aliased_table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliased_table_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterAliased_table_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitAliased_table_name(this);
		}
	}

	[RuleVersion(0)]
	public Aliased_table_nameContext aliased_table_name() {
		Aliased_table_nameContext _localctx = new Aliased_table_nameContext(Context, State);
		EnterRule(_localctx, 30, RULE_aliased_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			table_name();
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 218;
					Match(AS_);
					}
					break;
				}
				State = 221;
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_() { return GetToken(MSAccessParser.ASC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_() { return GetToken(MSAccessParser.DESC_, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 32, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC_ || _la==DESC_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_termContext : ParserRuleContext {
		public ExprContext orderingExpr;
		public IToken orderingDirection;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_() { return GetToken(MSAccessParser.NULLS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_() { return GetToken(MSAccessParser.FIRST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_() { return GetToken(MSAccessParser.LAST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_() { return GetToken(MSAccessParser.ASC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_() { return GetToken(MSAccessParser.DESC_, 0); }
		public Ordering_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterOrdering_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitOrdering_term(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_termContext ordering_term() {
		Ordering_termContext _localctx = new Ordering_termContext(Context, State);
		EnterRule(_localctx, 34, RULE_ordering_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_localctx.orderingExpr = expr(0);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_ || _la==DESC_) {
				{
				State = 227;
				_localctx.orderingDirection = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC_ || _la==DESC_) ) {
					_localctx.orderingDirection = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NULLS_) {
				{
				State = 230;
				Match(NULLS_);
				State = 231;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_ || _la==LAST_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(MSAccessParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MSAccessParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MSAccessParser.MINUS, 0); }
		public Signed_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterSigned_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitSigned_number(this);
		}
	}

	[RuleVersion(0)]
	public Signed_numberContext signed_number() {
		Signed_numberContext _localctx = new Signed_numberContext(Context, State);
		EnterRule(_localctx, 36, RULE_signed_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				State = 234;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 237;
			Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_nameContext param_name() {
			return GetRuleContext<Param_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(MSAccessParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		public Param_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterParam_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitParam_def(this);
		}
	}

	[RuleVersion(0)]
	public Param_defContext param_def() {
		Param_defContext _localctx = new Param_defContext(Context, State);
		EnterRule(_localctx, 38, RULE_param_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			param_name();
			State = 240;
			type_name();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 241;
				Match(OPEN_PAR);
				State = 242;
				Match(NUMERIC_LITERAL);
				State = 243;
				Match(CLOSE_PAR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Optional_parensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		public Optional_parensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optional_parens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterOptional_parens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitOptional_parens(this);
		}
	}

	[RuleVersion(0)]
	public Optional_parensContext optional_parens() {
		Optional_parensContext _localctx = new Optional_parensContext(Context, State);
		EnterRule(_localctx, 40, RULE_optional_parens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(OPEN_PAR);
			State = 247;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_() { return GetToken(MSAccessParser.DEFAULT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Signed_numberContext signed_number() {
			return GetRuleContext<Signed_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Literal_exprContext literal_expr() {
			return GetRuleContext<Literal_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MSAccessParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Optional_parensContext optional_parens() {
			return GetRuleContext<Optional_parensContext>(0);
		}
		public Default_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterDefault_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitDefault_expr(this);
		}
	}

	[RuleVersion(0)]
	public Default_exprContext default_expr() {
		Default_exprContext _localctx = new Default_exprContext(Context, State);
		EnterRule(_localctx, 42, RULE_default_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(DEFAULT_);
			State = 260;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 250;
				signed_number();
				}
				break;
			case 2:
				{
				State = 251;
				literal_expr();
				}
				break;
			case 3:
				{
				State = 252;
				Match(OPEN_PAR);
				State = 253;
				expr(0);
				State = 254;
				Match(CLOSE_PAR);
				}
				break;
			case 4:
				{
				State = 256;
				Match(IDENTIFIER);
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR) {
					{
					State = 257;
					optional_parens();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Param_defContext param_def() {
			return GetRuleContext<Param_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(MSAccessParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(MSAccessParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_() { return GetToken(MSAccessParser.WITH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_() { return GetToken(MSAccessParser.COMPRESSION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMP_() { return GetToken(MSAccessParser.COMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Default_exprContext default_expr() {
			return GetRuleContext<Default_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Single_field_constraintContext single_field_constraint() {
			return GetRuleContext<Single_field_constraintContext>(0);
		}
		public Column_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterColumn_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitColumn_def(this);
		}
	}

	[RuleVersion(0)]
	public Column_defContext column_def() {
		Column_defContext _localctx = new Column_defContext(Context, State);
		EnterRule(_localctx, 44, RULE_column_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			param_def();
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT_) {
				{
				State = 263;
				Match(NOT_);
				State = 264;
				Match(NULL_);
				}
			}

			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH_:
				{
				State = 267;
				Match(WITH_);
				State = 268;
				Match(COMPRESSION_);
				}
				break;
			case COMP_:
				{
				State = 269;
				Match(COMP_);
				}
				break;
			case CLOSE_PAR:
			case COMMA:
			case CHECK_:
			case DEFAULT_:
			case PRIMARY_:
			case REFERENCES_:
			case UNIQUE_:
				break;
			default:
				break;
			}
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_) {
				{
				State = 272;
				default_expr();
				}
			}

			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHECK_ || (((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & 524297L) != 0) {
				{
				State = 275;
				single_field_constraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefixed_starContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(MSAccessParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MSAccessParser.STAR, 0); }
		public Prefixed_starContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixed_star; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterPrefixed_star(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitPrefixed_star(this);
		}
	}

	[RuleVersion(0)]
	public Prefixed_starContext prefixed_star() {
		Prefixed_starContext _localctx = new Prefixed_starContext(Context, State);
		EnterRule(_localctx, 46, RULE_prefixed_star);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			table_name();
			State = 279;
			Match(DOT);
			State = 280;
			Match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prefixed_column_nameContext : ParserRuleContext {
		public Table_nameContext prefixName;
		public Column_nameContext columnName;
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(MSAccessParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(MSAccessParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		public Prefixed_column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixed_column_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterPrefixed_column_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitPrefixed_column_name(this);
		}
	}

	[RuleVersion(0)]
	public Prefixed_column_nameContext prefixed_column_name() {
		Prefixed_column_nameContext _localctx = new Prefixed_column_nameContext(Context, State);
		EnterRule(_localctx, 48, RULE_prefixed_column_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 282;
					_localctx.prefixName = table_name();
					State = 283;
					Match(DOT);
					}
					} 
				}
				State = 289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 290;
			_localctx.columnName = column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Result_columnContext : ParserRuleContext {
		public ExprContext columnExpr;
		public Column_aliasContext columnAlias;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MSAccessParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Prefixed_starContext prefixed_star() {
			return GetRuleContext<Prefixed_starContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(MSAccessParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public Result_columnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_result_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterResult_column(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitResult_column(this);
		}
	}

	[RuleVersion(0)]
	public Result_columnContext result_column() {
		Result_columnContext _localctx = new Result_columnContext(Context, State);
		EnterRule(_localctx, 50, RULE_result_column);
		int _la;
		try {
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 292;
				Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 293;
				prefixed_star();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 294;
				_localctx.columnExpr = expr(0);
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS_) {
					{
					State = 295;
					Match(AS_);
					State = 296;
					_localctx.columnAlias = column_alias();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Prefixed_starContext prefixed_star() {
			return GetRuleContext<Prefixed_starContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_() { return GetToken(MSAccessParser.DISTINCT_, 0); }
		public Param_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterParam_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitParam_expr(this);
		}
	}

	[RuleVersion(0)]
	public Param_exprContext param_expr() {
		Param_exprContext _localctx = new Param_exprContext(Context, State);
		EnterRule(_localctx, 52, RULE_param_expr);
		try {
			State = 306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301;
				prefixed_star();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 302;
					Match(DISTINCT_);
					}
					break;
				}
				State = 305;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MSAccessParser.IDENTIFIER, 0); }
		public User_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterUser_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitUser_name(this);
		}
	}

	[RuleVersion(0)]
	public User_nameContext user_name() {
		User_nameContext _localctx = new User_nameContext(Context, State);
		EnterRule(_localctx, 54, RULE_user_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MSAccessParser.IDENTIFIER, 0); }
		public Group_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterGroup_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitGroup_name(this);
		}
	}

	[RuleVersion(0)]
	public Group_nameContext group_name() {
		Group_nameContext _localctx = new Group_nameContext(Context, State);
		EnterRule(_localctx, 56, RULE_group_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class User_or_group_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MSAccessParser.IDENTIFIER, 0); }
		public User_or_group_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user_or_group_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterUser_or_group_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitUser_or_group_name(this);
		}
	}

	[RuleVersion(0)]
	public User_or_group_nameContext user_or_group_name() {
		User_or_group_nameContext _localctx = new User_or_group_nameContext(Context, State);
		EnterRule(_localctx, 58, RULE_user_or_group_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL() { return GetToken(MSAccessParser.STRING_LITERAL, 0); }
		public PasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_password; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitPassword(this);
		}
	}

	[RuleVersion(0)]
	public PasswordContext password() {
		PasswordContext _localctx = new PasswordContext(Context, State);
		EnterRule(_localctx, 60, RULE_password);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(MSAccessParser.NUMERIC_LITERAL, 0); }
		public PidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterPid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitPid(this);
		}
	}

	[RuleVersion(0)]
	public PidContext pid() {
		PidContext _localctx = new PidContext(Context, State);
		EnterRule(_localctx, 62, RULE_pid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(NUMERIC_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext lhs;
		public Literal_exprContext literalExpr;
		public IToken bindParameter;
		public Prefixed_column_nameContext prefixedColumnName;
		public IToken op;
		public ExprContext rhs;
		public Function_exprContext functionExpr;
		public Type_nameContext typeName;
		public IToken inv;
		public Select_stmtContext subquery;
		public ExprContext caseExpr;
		public ExprContext _expr;
		public IList<ExprContext> _whenExpr = new List<ExprContext>();
		public IList<ExprContext> _thenExpr = new List<ExprContext>();
		public ExprContext elseExpr;
		public ExprContext start;
		public ExprContext stop;
		public IToken selector;
		public IList<ExprContext> _expressions = new List<ExprContext>();
		public ExprContext escape;
		[System.Diagnostics.DebuggerNonUserCode] public Literal_exprContext literal_expr() {
			return GetRuleContext<Literal_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIND_PARAMETER() { return GetToken(MSAccessParser.BIND_PARAMETER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Prefixed_column_nameContext prefixed_column_name() {
			return GetRuleContext<Prefixed_column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(MSAccessParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(MSAccessParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(MSAccessParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_exprContext function_expr() {
			return GetRuleContext<Function_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(MSAccessParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST_() { return GetToken(MSAccessParser.CAST_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_() { return GetToken(MSAccessParser.EXISTS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_() { return GetToken(MSAccessParser.END_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_() { return GetToken(MSAccessParser.CASE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHEN_() { return GetTokens(MSAccessParser.WHEN_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN_(int i) {
			return GetToken(MSAccessParser.WHEN_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN_() { return GetTokens(MSAccessParser.THEN_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_(int i) {
			return GetToken(MSAccessParser.THEN_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_() { return GetToken(MSAccessParser.ELSE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMP() { return GetToken(MSAccessParser.AMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MSAccessParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(MSAccessParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDIV() { return GetToken(MSAccessParser.IDIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_() { return GetToken(MSAccessParser.MOD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(MSAccessParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ1() { return GetToken(MSAccessParser.NOT_EQ1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQ2() { return GetToken(MSAccessParser.NOT_EQ2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(MSAccessParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT_EQ() { return GetToken(MSAccessParser.LT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(MSAccessParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT_EQ() { return GetToken(MSAccessParser.GT_EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_() { return GetToken(MSAccessParser.IS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_() { return GetToken(MSAccessParser.AND_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_() { return GetToken(MSAccessParser.BETWEEN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_() { return GetToken(MSAccessParser.XOR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_() { return GetToken(MSAccessParser.OR_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQV_() { return GetToken(MSAccessParser.EQV_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_() { return GetToken(MSAccessParser.ALL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_() { return GetToken(MSAccessParser.ANY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOME_() { return GetToken(MSAccessParser.SOME_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_() { return GetToken(MSAccessParser.IN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_() { return GetToken(MSAccessParser.LIKE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALIKE_() { return GetToken(MSAccessParser.ALIKE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_() { return GetToken(MSAccessParser.REGEXP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_() { return GetToken(MSAccessParser.MATCH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_() { return GetToken(MSAccessParser.ESCAPE_, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 319;
				_localctx.literalExpr = literal_expr();
				}
				break;
			case 2:
				{
				State = 320;
				_localctx.bindParameter = Match(BIND_PARAMETER);
				}
				break;
			case 3:
				{
				State = 321;
				_localctx.prefixedColumnName = prefixed_column_name();
				}
				break;
			case 4:
				{
				State = 322;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS || _la==NOT_) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 323;
				_localctx.rhs = expr(19);
				}
				break;
			case 5:
				{
				State = 324;
				_localctx.functionExpr = function_expr();
				}
				break;
			case 6:
				{
				State = 325;
				_localctx.op = Match(CAST_);
				State = 326;
				Match(OPEN_PAR);
				State = 327;
				_localctx.lhs = expr(0);
				State = 328;
				Match(AS_);
				State = 329;
				_localctx.typeName = type_name();
				State = 330;
				Match(CLOSE_PAR);
				}
				break;
			case 7:
				{
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_) {
					{
					State = 332;
					_localctx.inv = Match(NOT_);
					}
				}

				State = 335;
				_localctx.op = Match(EXISTS_);
				State = 336;
				Match(OPEN_PAR);
				State = 337;
				_localctx.subquery = select_stmt();
				State = 338;
				Match(CLOSE_PAR);
				}
				break;
			case 8:
				{
				State = 340;
				_localctx.op = Match(CASE_);
				State = 342;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 341;
					_localctx.caseExpr = expr(0);
					}
					break;
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 344;
					Match(WHEN_);
					State = 345;
					_localctx._expr = expr(0);
					_localctx._whenExpr.Add(_localctx._expr);
					State = 346;
					Match(THEN_);
					State = 347;
					_localctx._expr = expr(0);
					_localctx._thenExpr.Add(_localctx._expr);
					}
					}
					State = 351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN_ );
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE_) {
					{
					State = 353;
					Match(ELSE_);
					State = 354;
					_localctx.elseExpr = expr(0);
					}
				}

				State = 357;
				Match(END_);
				}
				break;
			case 9:
				{
				State = 359;
				Match(OPEN_PAR);
				State = 362;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 360;
					_localctx.subquery = select_stmt();
					}
					break;
				case 2:
					{
					State = 361;
					expr(0);
					}
					break;
				}
				State = 364;
				Match(CLOSE_PAR);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 445;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 443;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 368;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 369;
						_localctx.op = Match(AMP);
						State = 370;
						_localctx.rhs = expr(17);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 371;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 372;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 28928L) != 0) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 373;
						_localctx.rhs = expr(16);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 374;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 375;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 376;
						_localctx.rhs = expr(15);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 377;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 378;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 66584576L) != 0) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 379;
						_localctx.rhs = expr(14);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 380;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 381;
						_localctx.op = Match(IS_);
						State = 383;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
						case 1:
							{
							State = 382;
							_localctx.inv = Match(NOT_);
							}
							break;
						}
						State = 385;
						_localctx.rhs = expr(12);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 386;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 388;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_) {
							{
							State = 387;
							_localctx.inv = Match(NOT_);
							}
						}

						State = 390;
						_localctx.op = Match(BETWEEN_);
						State = 391;
						_localctx.start = expr(0);
						State = 392;
						Match(AND_);
						State = 393;
						_localctx.stop = expr(9);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 395;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 396;
						_localctx.op = Match(XOR_);
						State = 397;
						_localctx.rhs = expr(8);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 398;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 399;
						_localctx.op = Match(AND_);
						State = 400;
						_localctx.rhs = expr(7);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 401;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 402;
						_localctx.op = Match(OR_);
						State = 403;
						_localctx.rhs = expr(6);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 404;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 405;
						_localctx.op = Match(EQV_);
						State = 406;
						_localctx.rhs = expr(5);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 407;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 408;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 66584576L) != 0) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 409;
						_localctx.selector = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ALL_ || _la==ANY_ || _la==SOME_) ) {
							_localctx.selector = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 410;
						Match(OPEN_PAR);
						State = 411;
						_localctx.subquery = select_stmt();
						State = 412;
						Match(CLOSE_PAR);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 414;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 416;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_) {
							{
							State = 415;
							_localctx.inv = Match(NOT_);
							}
						}

						State = 418;
						_localctx.op = Match(IN_);
						State = 419;
						Match(OPEN_PAR);
						State = 429;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
						case 1:
							{
							State = 420;
							_localctx.subquery = select_stmt();
							}
							break;
						case 2:
							{
							State = 421;
							_localctx._expr = expr(0);
							_localctx._expressions.Add(_localctx._expr);
							State = 426;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==COMMA) {
								{
								{
								State = 422;
								Match(COMMA);
								State = 423;
								_localctx._expr = expr(0);
								_localctx._expressions.Add(_localctx._expr);
								}
								}
								State = 428;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
							break;
						}
						State = 431;
						Match(CLOSE_PAR);
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.lhs = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 433;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 435;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT_) {
							{
							State = 434;
							_localctx.inv = Match(NOT_);
							}
						}

						State = 437;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 262155L) != 0) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 438;
						_localctx.rhs = expr(0);
						State = 441;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
						case 1:
							{
							State = 439;
							Match(ESCAPE_);
							State = 440;
							_localctx.escape = expr(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 447;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Function_exprContext : ParserRuleContext {
		public Function_nameContext functionName;
		public Param_exprContext _param_expr;
		public IList<Param_exprContext> _params = new List<Param_exprContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MSAccessParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_exprContext[] param_expr() {
			return GetRuleContexts<Param_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_exprContext param_expr(int i) {
			return GetRuleContext<Param_exprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Function_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterFunction_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitFunction_expr(this);
		}
	}

	[RuleVersion(0)]
	public Function_exprContext function_expr() {
		Function_exprContext _localctx = new Function_exprContext(Context, State);
		EnterRule(_localctx, 66, RULE_function_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			_localctx.functionName = function_name();
			State = 449;
			Match(OPEN_PAR);
			State = 459;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case PLUS:
			case MINUS:
			case ADD_:
			case ALL_:
			case ALTER_:
			case AND_:
			case AS_:
			case ASC_:
			case BEGIN_:
			case BETWEEN_:
			case BY_:
			case CASCADE_:
			case CASE_:
			case CAST_:
			case CHECK_:
			case COLUMN_:
			case COMMIT_:
			case COMP_:
			case COMPRESSION_:
			case CONSTRAINT_:
			case CREATE_:
			case CURRENT_DATE_:
			case CURRENT_TIME_:
			case CURRENT_TIMESTAMP_:
			case DATABASE_:
			case DEFAULT_:
			case DELETE_:
			case DESC_:
			case DISALLOW_:
			case DISTINCT_:
			case DISTINCTROW_:
			case DROP_:
			case ELSE_:
			case END_:
			case EQV_:
			case ESCAPE_:
			case EXCEPT_:
			case EXISTS_:
			case FOREIGN_:
			case FROM_:
			case GROUP_:
			case HAVING_:
			case IGNORE_:
			case IN_:
			case INDEX_:
			case INDEXED_:
			case INNER_:
			case INSERT_:
			case INTERSECT_:
			case INTO_:
			case IS_:
			case JOIN_:
			case KEY_:
			case LEFT_:
			case ALIKE_:
			case LIKE_:
			case TOP_:
			case MATCH_:
			case MINUS_:
			case NO_:
			case NOT_:
			case NULL_:
			case ON_:
			case OR_:
			case ORDER_:
			case OUTER_:
			case PARAMETERS_:
			case PASSWORD_:
			case PRIMARY_:
			case PROCEDURE_:
			case REFERENCES_:
			case REGEXP_:
			case RIGHT_:
			case ROLLBACK_:
			case SELECT_:
			case SET_:
			case TABLE_:
			case TEMP_:
			case TEMPORARY_:
			case THEN_:
			case TO_:
			case TRANSACTION_:
			case USER_:
			case WORK_:
			case UNION_:
			case UNIQUE_:
			case UPDATE_:
			case VALUES_:
			case VIEW_:
			case WHEN_:
			case WHERE_:
			case WITH_:
			case XOR_:
			case TRUE_:
			case FALSE_:
			case NULLS_:
			case FIRST_:
			case LAST_:
			case OBJECT_:
			case CONTAINER_:
			case GRANT_:
			case REVOKE_:
			case SELECTSECURITY_:
			case UPDATESECURITY_:
			case DBPASSWORD_:
			case UPDATEIDENTITY_:
			case SELECTSCHEMA_:
			case SCHEMA_:
			case UPDATEOWNER_:
			case LONGBINARY_:
			case BINARY_:
			case BIT_:
			case COUNTER_:
			case CURRENCY_:
			case DATE_:
			case TIME_:
			case DATETIME_:
			case TIMESTAMP_:
			case GUID_:
			case LONGTEXT_:
			case SINGLE_:
			case DOUBLE_:
			case UNSIGNED_:
			case BYTE_:
			case SHORT_:
			case INTEGER_:
			case LONG_:
			case NUMERIC_:
			case VARCHAR_:
			case VARBINARY_:
			case YESNO_:
			case TEXT_:
			case REPLICATIONID_:
			case AUTONUMBER_:
			case OLEOBJECT_:
			case MEMO_:
			case HYPERLINK_:
			case PERCENT_:
			case IDENTIFIER:
			case NUMERIC_LITERAL:
			case BIND_PARAMETER:
			case STRING_LITERAL:
			case DATE_LITERAL:
			case BLOB_LITERAL:
				{
				{
				State = 450;
				_localctx._param_expr = param_expr();
				_localctx._params.Add(_localctx._param_expr);
				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 451;
					Match(COMMA);
					State = 452;
					_localctx._param_expr = param_expr();
					_localctx._params.Add(_localctx._param_expr);
					}
					}
					State = 457;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case STAR:
				{
				State = 458;
				Match(STAR);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			State = 461;
			Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_user_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(MSAccessParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_() { return GetToken(MSAccessParser.USER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public User_nameContext[] user_name() {
			return GetRuleContexts<User_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public User_nameContext user_name(int i) {
			return GetRuleContext<User_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PasswordContext[] password() {
			return GetRuleContexts<PasswordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PasswordContext password(int i) {
			return GetRuleContext<PasswordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PidContext[] pid() {
			return GetRuleContexts<PidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PidContext pid(int i) {
			return GetRuleContext<PidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Create_user_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_user_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterCreate_user_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitCreate_user_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_user_stmtContext create_user_stmt() {
		Create_user_stmtContext _localctx = new Create_user_stmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_create_user_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(CREATE_);
			State = 464;
			Match(USER_);
			State = 465;
			user_name();
			State = 466;
			password();
			State = 467;
			pid();
			State = 475;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 468;
				Match(COMMA);
				State = 469;
				user_name();
				State = 470;
				password();
				State = 471;
				pid();
				}
				}
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_group_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(MSAccessParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_() { return GetToken(MSAccessParser.GROUP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_nameContext[] group_name() {
			return GetRuleContexts<Group_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_nameContext group_name(int i) {
			return GetRuleContext<Group_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PidContext[] pid() {
			return GetRuleContexts<PidContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PidContext pid(int i) {
			return GetRuleContext<PidContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Create_group_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_group_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterCreate_group_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitCreate_group_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_group_stmtContext create_group_stmt() {
		Create_group_stmtContext _localctx = new Create_group_stmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_create_group_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478;
			Match(CREATE_);
			State = 479;
			Match(GROUP_);
			State = 480;
			group_name();
			State = 481;
			pid();
			State = 488;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 482;
				Match(COMMA);
				State = 483;
				group_name();
				State = 484;
				pid();
				}
				}
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_user_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_() { return GetToken(MSAccessParser.DROP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_() { return GetToken(MSAccessParser.USER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public User_nameContext[] user_name() {
			return GetRuleContexts<User_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public User_nameContext user_name(int i) {
			return GetRuleContext<User_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_() { return GetToken(MSAccessParser.FROM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_nameContext group_name() {
			return GetRuleContext<Group_nameContext>(0);
		}
		public Drop_user_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_user_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterDrop_user_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitDrop_user_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_user_stmtContext drop_user_stmt() {
		Drop_user_stmtContext _localctx = new Drop_user_stmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_drop_user_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			Match(DROP_);
			State = 492;
			Match(USER_);
			State = 493;
			user_name();
			State = 498;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 494;
				Match(COMMA);
				State = 495;
				user_name();
				}
				}
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 503;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_) {
				{
				State = 501;
				Match(FROM_);
				State = 502;
				group_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_group_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_() { return GetToken(MSAccessParser.DROP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_() { return GetToken(MSAccessParser.GROUP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_nameContext[] group_name() {
			return GetRuleContexts<Group_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_nameContext group_name(int i) {
			return GetRuleContext<Group_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Drop_group_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_group_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterDrop_group_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitDrop_group_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_group_stmtContext drop_group_stmt() {
		Drop_group_stmtContext _localctx = new Drop_group_stmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_drop_group_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			Match(DROP_);
			State = 506;
			Match(GROUP_);
			State = 507;
			group_name();
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 508;
				Match(COMMA);
				State = 509;
				group_name();
				}
				}
				State = 514;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_password_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_() { return GetToken(MSAccessParser.ALTER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_() { return GetToken(MSAccessParser.PASSWORD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PasswordContext[] password() {
			return GetRuleContexts<PasswordContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PasswordContext password(int i) {
			return GetRuleContext<PasswordContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_() { return GetToken(MSAccessParser.DATABASE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_() { return GetToken(MSAccessParser.USER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public User_nameContext user_name() {
			return GetRuleContext<User_nameContext>(0);
		}
		public Alter_password_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_password_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterAlter_password_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitAlter_password_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_password_stmtContext alter_password_stmt() {
		Alter_password_stmtContext _localctx = new Alter_password_stmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_alter_password_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 515;
			Match(ALTER_);
			State = 519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATABASE_:
				{
				State = 516;
				Match(DATABASE_);
				}
				break;
			case USER_:
				{
				{
				State = 517;
				Match(USER_);
				State = 518;
				user_name();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 521;
			Match(PASSWORD_);
			State = 522;
			password();
			State = 523;
			password();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_user_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_() { return GetToken(MSAccessParser.ADD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_() { return GetToken(MSAccessParser.USER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public User_nameContext[] user_name() {
			return GetRuleContexts<User_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public User_nameContext user_name(int i) {
			return GetRuleContext<User_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_() { return GetToken(MSAccessParser.TO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Group_nameContext group_name() {
			return GetRuleContext<Group_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Add_user_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_user_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterAdd_user_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitAdd_user_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Add_user_stmtContext add_user_stmt() {
		Add_user_stmtContext _localctx = new Add_user_stmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_add_user_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525;
			Match(ADD_);
			State = 526;
			Match(USER_);
			State = 527;
			user_name();
			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 528;
				Match(COMMA);
				State = 529;
				user_name();
				}
				}
				State = 534;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 535;
			Match(TO_);
			State = 536;
			group_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Grant_stmtContext : ParserRuleContext {
		public IToken @object;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_() { return GetToken(MSAccessParser.GRANT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(MSAccessParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_() { return GetToken(MSAccessParser.TO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public User_or_group_nameContext[] user_or_group_name() {
			return GetRuleContexts<User_or_group_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public User_or_group_nameContext user_or_group_name(int i) {
			return GetRuleContext<User_or_group_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(MSAccessParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_() { return GetToken(MSAccessParser.OBJECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINER_() { return GetToken(MSAccessParser.CONTAINER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Grant_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grant_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterGrant_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitGrant_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Grant_stmtContext grant_stmt() {
		Grant_stmtContext _localctx = new Grant_stmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_grant_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			Match(GRANT_);
			State = 539;
			privilege();
			State = 544;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 540;
				Match(COMMA);
				State = 541;
				privilege();
				}
				}
				State = 546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 547;
			Match(ON_);
			State = 548;
			_localctx.@object = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & 12582913L) != 0) ) {
				_localctx.@object = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 549;
			any_name();
			State = 550;
			Match(TO_);
			State = 551;
			user_or_group_name();
			State = 556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 552;
				Match(COMMA);
				State = 553;
				user_or_group_name();
				}
				}
				State = 558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Revoke_stmtContext : ParserRuleContext {
		public IToken @object;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE_() { return GetToken(MSAccessParser.REVOKE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext[] privilege() {
			return GetRuleContexts<PrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeContext privilege(int i) {
			return GetRuleContext<PrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(MSAccessParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_() { return GetToken(MSAccessParser.FROM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public User_or_group_nameContext[] user_or_group_name() {
			return GetRuleContexts<User_or_group_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public User_or_group_nameContext user_or_group_name(int i) {
			return GetRuleContext<User_or_group_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(MSAccessParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBJECT_() { return GetToken(MSAccessParser.OBJECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINER_() { return GetToken(MSAccessParser.CONTAINER_, 0); }
		public Revoke_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revoke_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterRevoke_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitRevoke_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Revoke_stmtContext revoke_stmt() {
		Revoke_stmtContext _localctx = new Revoke_stmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_revoke_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 559;
			Match(REVOKE_);
			State = 560;
			privilege();
			{
			State = 561;
			Match(COMMA);
			State = 562;
			privilege();
			}
			State = 564;
			Match(ON_);
			State = 565;
			_localctx.@object = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & 12582913L) != 0) ) {
				_localctx.@object = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 566;
			any_name();
			State = 567;
			Match(FROM_);
			State = 568;
			user_or_group_name();
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 569;
				Match(COMMA);
				State = 570;
				user_or_group_name();
				}
				}
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alter_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALTER_() { return GetTokens(MSAccessParser.ALTER_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_(int i) {
			return GetToken(MSAccessParser.ALTER_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(MSAccessParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_() { return GetToken(MSAccessParser.ADD_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_() { return GetToken(MSAccessParser.DROP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_() { return GetToken(MSAccessParser.COLUMN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_defContext param_def() {
			return GetRuleContext<Param_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiple_field_constraintContext multiple_field_constraint() {
			return GetRuleContext<Multiple_field_constraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_() { return GetToken(MSAccessParser.CONSTRAINT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		public Alter_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alter_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterAlter_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitAlter_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Alter_table_stmtContext alter_table_stmt() {
		Alter_table_stmtContext _localctx = new Alter_table_stmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_alter_table_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 576;
			Match(ALTER_);
			State = 577;
			Match(TABLE_);
			State = 578;
			table_name();
			State = 598;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD_:
				{
				State = 579;
				Match(ADD_);
				State = 583;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COLUMN_:
					{
					State = 580;
					Match(COLUMN_);
					State = 581;
					param_def();
					}
					break;
				case CONSTRAINT_:
					{
					State = 582;
					multiple_field_constraint();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP_:
				{
				State = 585;
				Match(DROP_);
				State = 590;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COLUMN_:
					{
					State = 586;
					Match(COLUMN_);
					State = 587;
					column_name();
					}
					break;
				case CONSTRAINT_:
					{
					State = 588;
					Match(CONSTRAINT_);
					State = 589;
					index_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ALTER_:
				{
				State = 592;
				Match(ALTER_);
				State = 596;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case COLUMN_:
					{
					State = 593;
					Match(COLUMN_);
					State = 594;
					param_def();
					}
					break;
				case CONSTRAINT_:
					{
					State = 595;
					multiple_field_constraint();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Begin_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_() { return GetToken(MSAccessParser.BEGIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_() { return GetToken(MSAccessParser.TRANSACTION_, 0); }
		public Begin_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_begin_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterBegin_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitBegin_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Begin_stmtContext begin_stmt() {
		Begin_stmtContext _localctx = new Begin_stmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_begin_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600;
			Match(BEGIN_);
			State = 602;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION_) {
				{
				State = 601;
				Match(TRANSACTION_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commit_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_() { return GetToken(MSAccessParser.COMMIT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_() { return GetToken(MSAccessParser.TRANSACTION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_() { return GetToken(MSAccessParser.WORK_, 0); }
		public Commit_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commit_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterCommit_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitCommit_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Commit_stmtContext commit_stmt() {
		Commit_stmtContext _localctx = new Commit_stmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_commit_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			Match(COMMIT_);
			State = 606;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION_ || _la==WORK_) {
				{
				State = 605;
				_la = TokenStream.LA(1);
				if ( !(_la==TRANSACTION_ || _la==WORK_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rollback_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_() { return GetToken(MSAccessParser.ROLLBACK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_() { return GetToken(MSAccessParser.TRANSACTION_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_() { return GetToken(MSAccessParser.WORK_, 0); }
		public Rollback_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollback_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterRollback_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitRollback_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Rollback_stmtContext rollback_stmt() {
		Rollback_stmtContext _localctx = new Rollback_stmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_rollback_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(ROLLBACK_);
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TRANSACTION_ || _la==WORK_) {
				{
				State = 609;
				_la = TokenStream.LA(1);
				if ( !(_la==TRANSACTION_ || _la==WORK_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_triggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(MSAccessParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_() { return GetToken(MSAccessParser.UPDATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_() { return GetToken(MSAccessParser.DELETE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_() { return GetToken(MSAccessParser.CASCADE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_() { return GetToken(MSAccessParser.SET_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(MSAccessParser.NULL_, 0); }
		public On_triggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_trigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterOn_trigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitOn_trigger(this);
		}
	}

	[RuleVersion(0)]
	public On_triggerContext on_trigger() {
		On_triggerContext _localctx = new On_triggerContext(Context, State);
		EnterRule(_localctx, 92, RULE_on_trigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612;
			Match(ON_);
			State = 613;
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE_ || _la==UPDATE_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 617;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASCADE_:
				{
				State = 614;
				Match(CASCADE_);
				}
				break;
			case SET_:
				{
				State = 615;
				Match(SET_);
				State = 616;
				Match(NULL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_field_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_() { return GetToken(MSAccessParser.PRIMARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_() { return GetToken(MSAccessParser.KEY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_() { return GetToken(MSAccessParser.UNIQUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_() { return GetToken(MSAccessParser.REFERENCES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name() {
			return GetRuleContext<Column_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public On_triggerContext[] on_trigger() {
			return GetRuleContexts<On_triggerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_triggerContext on_trigger(int i) {
			return GetRuleContext<On_triggerContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_() { return GetToken(MSAccessParser.CHECK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Single_field_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_field_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterSingle_field_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitSingle_field_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Single_field_constraintContext single_field_constraint() {
		Single_field_constraintContext _localctx = new Single_field_constraintContext(Context, State);
		EnterRule(_localctx, 94, RULE_single_field_constraint);
		int _la;
		try {
			State = 641;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 619;
				Match(PRIMARY_);
				State = 620;
				Match(KEY_);
				}
				break;
			case UNIQUE_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 621;
				Match(UNIQUE_);
				}
				break;
			case REFERENCES_:
				EnterOuterAlt(_localctx, 3);
				{
				State = 622;
				Match(REFERENCES_);
				State = 623;
				table_name();
				State = 628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR) {
					{
					State = 624;
					Match(OPEN_PAR);
					State = 625;
					column_name();
					State = 626;
					Match(CLOSE_PAR);
					}
				}

				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ON_) {
					{
					{
					State = 630;
					on_trigger();
					}
					}
					State = 635;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case CHECK_:
				EnterOuterAlt(_localctx, 4);
				{
				State = 636;
				Match(CHECK_);
				State = 637;
				Match(OPEN_PAR);
				State = 638;
				expr(0);
				State = 639;
				Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_field_constraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_() { return GetToken(MSAccessParser.CONSTRAINT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_() { return GetToken(MSAccessParser.PRIMARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_() { return GetToken(MSAccessParser.KEY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_() { return GetToken(MSAccessParser.UNIQUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_() { return GetToken(MSAccessParser.FOREIGN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(MSAccessParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(MSAccessParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(MSAccessParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(MSAccessParser.CLOSE_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_() { return GetToken(MSAccessParser.REFERENCES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_() { return GetToken(MSAccessParser.CHECK_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_() { return GetToken(MSAccessParser.NO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_() { return GetToken(MSAccessParser.INDEX_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_triggerContext[] on_trigger() {
			return GetRuleContexts<On_triggerContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public On_triggerContext on_trigger(int i) {
			return GetRuleContext<On_triggerContext>(i);
		}
		public Multiple_field_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_field_constraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterMultiple_field_constraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitMultiple_field_constraint(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_field_constraintContext multiple_field_constraint() {
		Multiple_field_constraintContext _localctx = new Multiple_field_constraintContext(Context, State);
		EnterRule(_localctx, 96, RULE_multiple_field_constraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			Match(CONSTRAINT_);
			State = 644;
			name();
			State = 716;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_:
				{
				State = 645;
				Match(PRIMARY_);
				State = 646;
				Match(KEY_);
				State = 658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR) {
					{
					State = 647;
					Match(OPEN_PAR);
					State = 648;
					column_name();
					State = 653;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 649;
						Match(COMMA);
						State = 650;
						column_name();
						}
						}
						State = 655;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 656;
					Match(CLOSE_PAR);
					}
				}

				}
				break;
			case UNIQUE_:
				{
				State = 660;
				Match(UNIQUE_);
				State = 672;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR) {
					{
					State = 661;
					Match(OPEN_PAR);
					State = 662;
					column_name();
					State = 667;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 663;
						Match(COMMA);
						State = 664;
						column_name();
						}
						}
						State = 669;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 670;
					Match(CLOSE_PAR);
					}
				}

				}
				break;
			case FOREIGN_:
				{
				State = 674;
				Match(FOREIGN_);
				State = 675;
				Match(KEY_);
				State = 678;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO_) {
					{
					State = 676;
					Match(NO_);
					State = 677;
					Match(INDEX_);
					}
				}

				State = 680;
				Match(OPEN_PAR);
				State = 681;
				column_name();
				State = 686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 682;
					Match(COMMA);
					State = 683;
					column_name();
					}
					}
					State = 688;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 689;
				Match(CLOSE_PAR);
				State = 690;
				Match(REFERENCES_);
				State = 691;
				table_name();
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR) {
					{
					State = 692;
					Match(OPEN_PAR);
					State = 693;
					column_name();
					State = 698;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 694;
						Match(COMMA);
						State = 695;
						column_name();
						}
						}
						State = 700;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 701;
					Match(CLOSE_PAR);
					}
				}

				State = 708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ON_) {
					{
					{
					State = 705;
					on_trigger();
					}
					}
					State = 710;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case CHECK_:
				{
				State = 711;
				Match(CHECK_);
				State = 712;
				Match(OPEN_PAR);
				State = 713;
				expr(0);
				State = 714;
				Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exec_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXEC_() { return GetToken(MSAccessParser.EXEC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Exec_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exec_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterExec_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitExec_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Exec_stmtContext exec_stmt() {
		Exec_stmtContext _localctx = new Exec_stmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_exec_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718;
			Match(EXEC_);
			State = 719;
			any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_table_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(MSAccessParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(MSAccessParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext[] column_def() {
			return GetRuleContexts<Column_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_defContext column_def(int i) {
			return GetRuleContext<Column_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(MSAccessParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_() { return GetToken(MSAccessParser.TEMPORARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP_() { return GetToken(MSAccessParser.TEMP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiple_field_constraintContext[] multiple_field_constraint() {
			return GetRuleContexts<Multiple_field_constraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Multiple_field_constraintContext multiple_field_constraint(int i) {
			return GetRuleContext<Multiple_field_constraintContext>(i);
		}
		public Create_table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterCreate_table_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitCreate_table_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_table_stmtContext create_table_stmt() {
		Create_table_stmtContext _localctx = new Create_table_stmtContext(Context, State);
		EnterRule(_localctx, 100, RULE_create_table_stmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			Match(CREATE_);
			State = 723;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMP_ || _la==TEMPORARY_) {
				{
				State = 722;
				_la = TokenStream.LA(1);
				if ( !(_la==TEMP_ || _la==TEMPORARY_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 725;
			Match(TABLE_);
			State = 726;
			table_name();
			State = 747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
				{
				State = 727;
				Match(OPEN_PAR);
				State = 728;
				column_def();
				State = 733;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 729;
						Match(COMMA);
						State = 730;
						column_def();
						}
						} 
					}
					State = 735;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,68,Context);
				}
				State = 740;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 736;
					Match(COMMA);
					State = 737;
					multiple_field_constraint();
					}
					}
					State = 742;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 743;
				Match(CLOSE_PAR);
				}
				break;
			case AS_:
				{
				State = 745;
				Match(AS_);
				State = 746;
				select_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_view_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(MSAccessParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_() { return GetToken(MSAccessParser.VIEW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public View_nameContext view_name() {
			return GetRuleContext<View_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(MSAccessParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Create_view_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_view_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterCreate_view_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitCreate_view_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_view_stmtContext create_view_stmt() {
		Create_view_stmtContext _localctx = new Create_view_stmtContext(Context, State);
		EnterRule(_localctx, 102, RULE_create_view_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 749;
			Match(CREATE_);
			State = 750;
			Match(VIEW_);
			State = 751;
			view_name();
			State = 763;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 752;
				Match(OPEN_PAR);
				State = 753;
				column_name();
				State = 758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 754;
					Match(COMMA);
					State = 755;
					column_name();
					}
					}
					State = 760;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 761;
				Match(CLOSE_PAR);
				}
			}

			State = 765;
			Match(AS_);
			State = 766;
			select_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_index_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(MSAccessParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_() { return GetToken(MSAccessParser.INDEX_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(MSAccessParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_() { return GetToken(MSAccessParser.UNIQUE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_() { return GetToken(MSAccessParser.WITH_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_() { return GetToken(MSAccessParser.PRIMARY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISALLOW_() { return GetToken(MSAccessParser.DISALLOW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_() { return GetToken(MSAccessParser.NULL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_() { return GetToken(MSAccessParser.IGNORE_, 0); }
		public Create_index_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_index_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterCreate_index_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitCreate_index_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_index_stmtContext create_index_stmt() {
		Create_index_stmtContext _localctx = new Create_index_stmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_create_index_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768;
			Match(CREATE_);
			State = 770;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNIQUE_) {
				{
				State = 769;
				Match(UNIQUE_);
				}
			}

			State = 772;
			Match(INDEX_);
			State = 773;
			index_name();
			State = 774;
			Match(ON_);
			State = 775;
			table_name();
			State = 776;
			Match(OPEN_PAR);
			State = 777;
			column_name();
			State = 779;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_ || _la==DESC_) {
				{
				State = 778;
				direction();
				}
			}

			State = 788;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 781;
				Match(COMMA);
				State = 782;
				column_name();
				State = 784;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_ || _la==DESC_) {
					{
					State = 783;
					direction();
					}
				}

				}
				}
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 791;
			Match(CLOSE_PAR);
			State = 800;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_) {
				{
				State = 792;
				Match(WITH_);
				State = 798;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY_:
					{
					State = 793;
					Match(PRIMARY_);
					}
					break;
				case DISALLOW_:
					{
					State = 794;
					Match(DISALLOW_);
					State = 795;
					Match(NULL_);
					}
					break;
				case IGNORE_:
					{
					State = 796;
					Match(IGNORE_);
					State = 797;
					Match(NULL_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Create_procedure_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_() { return GetToken(MSAccessParser.CREATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(MSAccessParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROC_() { return GetToken(MSAccessParser.PROC_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_() { return GetToken(MSAccessParser.PROCEDURE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_stmtContext drop_stmt() {
			return GetRuleContext<Drop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_defContext[] param_def() {
			return GetRuleContexts<Param_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_defContext param_def(int i) {
			return GetRuleContext<Param_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Create_procedure_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create_procedure_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterCreate_procedure_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitCreate_procedure_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Create_procedure_stmtContext create_procedure_stmt() {
		Create_procedure_stmtContext _localctx = new Create_procedure_stmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_create_procedure_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 802;
			Match(CREATE_);
			State = 803;
			_la = TokenStream.LA(1);
			if ( !(_la==PROC_ || _la==PROCEDURE_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 804;
			procedure_name();
			State = 816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 805;
				Match(OPEN_PAR);
				State = 806;
				param_def();
				State = 811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 807;
					Match(COMMA);
					State = 808;
					param_def();
					}
					}
					State = 813;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 814;
				Match(CLOSE_PAR);
				}
			}

			State = 818;
			Match(AS_);
			State = 825;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT_:
				{
				State = 819;
				select_stmt();
				}
				break;
			case UPDATE_:
				{
				State = 820;
				update_stmt();
				}
				break;
			case DELETE_:
				{
				State = 821;
				delete_stmt();
				}
				break;
			case INSERT_:
				{
				State = 822;
				insert_stmt();
				}
				break;
			case CREATE_:
				{
				State = 823;
				create_table_stmt();
				}
				break;
			case DROP_:
				{
				State = 824;
				drop_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Drop_stmtContext : ParserRuleContext {
		public IToken @object;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_() { return GetToken(MSAccessParser.DROP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(MSAccessParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(MSAccessParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_() { return GetToken(MSAccessParser.INDEX_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_() { return GetToken(MSAccessParser.VIEW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_() { return GetToken(MSAccessParser.PROCEDURE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_() { return GetToken(MSAccessParser.CASCADE_, 0); }
		public Drop_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_drop_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterDrop_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitDrop_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Drop_stmtContext drop_stmt() {
		Drop_stmtContext _localctx = new Drop_stmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_drop_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 827;
			Match(DROP_);
			State = 840;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PROCEDURE_:
			case VIEW_:
				{
				State = 828;
				_localctx.@object = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==PROCEDURE_ || _la==VIEW_) ) {
					_localctx.@object = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 829;
				any_name();
				}
				break;
			case TABLE_:
				{
				State = 830;
				_localctx.@object = Match(TABLE_);
				State = 831;
				table_name();
				State = 833;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CASCADE_) {
					{
					State = 832;
					Match(CASCADE_);
					}
				}

				}
				break;
			case INDEX_:
				{
				State = 835;
				_localctx.@object = Match(INDEX_);
				State = 836;
				index_name();
				State = 837;
				Match(ON_);
				State = 838;
				table_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_stmtContext : ParserRuleContext {
		public Select_core_stmtContext _select_core_stmt;
		public IList<Select_core_stmtContext> _statements = new List<Select_core_stmtContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Select_core_stmtContext[] select_core_stmt() {
			return GetRuleContexts<Select_core_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_core_stmtContext select_core_stmt(int i) {
			return GetRuleContext<Select_core_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION_() { return GetTokens(MSAccessParser.UNION_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_(int i) {
			return GetToken(MSAccessParser.UNION_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERSECT_() { return GetTokens(MSAccessParser.INTERSECT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT_(int i) {
			return GetToken(MSAccessParser.INTERSECT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCEPT_() { return GetTokens(MSAccessParser.EXCEPT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_(int i) {
			return GetToken(MSAccessParser.EXCEPT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS_() { return GetTokens(MSAccessParser.MINUS_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_(int i) {
			return GetToken(MSAccessParser.MINUS_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DISTINCT_() { return GetTokens(MSAccessParser.DISTINCT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_(int i) {
			return GetToken(MSAccessParser.DISTINCT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL_() { return GetTokens(MSAccessParser.ALL_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_(int i) {
			return GetToken(MSAccessParser.ALL_, i);
		}
		public Select_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterSelect_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitSelect_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_stmtContext select_stmt() {
		Select_stmtContext _localctx = new Select_stmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_select_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			_localctx._select_core_stmt = select_core_stmt();
			_localctx._statements.Add(_localctx._select_core_stmt);
			State = 850;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 2251799822082049L) != 0) {
				{
				{
				State = 843;
				_la = TokenStream.LA(1);
				if ( !((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 2251799822082049L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_ || _la==DISTINCT_) {
					{
					State = 844;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL_ || _la==DISTINCT_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 847;
				_localctx._select_core_stmt = select_core_stmt();
				_localctx._statements.Add(_localctx._select_core_stmt);
				}
				}
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_stmtContext : ParserRuleContext {
		public Table_core_stmtContext _table_core_stmt;
		public IList<Table_core_stmtContext> _statements = new List<Table_core_stmtContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Table_core_stmtContext[] table_core_stmt() {
			return GetRuleContexts<Table_core_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_core_stmtContext table_core_stmt(int i) {
			return GetRuleContext<Table_core_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION_() { return GetTokens(MSAccessParser.UNION_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_(int i) {
			return GetToken(MSAccessParser.UNION_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERSECT_() { return GetTokens(MSAccessParser.INTERSECT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT_(int i) {
			return GetToken(MSAccessParser.INTERSECT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCEPT_() { return GetTokens(MSAccessParser.EXCEPT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_(int i) {
			return GetToken(MSAccessParser.EXCEPT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MINUS_() { return GetTokens(MSAccessParser.MINUS_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_(int i) {
			return GetToken(MSAccessParser.MINUS_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DISTINCT_() { return GetTokens(MSAccessParser.DISTINCT_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_(int i) {
			return GetToken(MSAccessParser.DISTINCT_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALL_() { return GetTokens(MSAccessParser.ALL_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_(int i) {
			return GetToken(MSAccessParser.ALL_, i);
		}
		public Table_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterTable_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitTable_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Table_stmtContext table_stmt() {
		Table_stmtContext _localctx = new Table_stmtContext(Context, State);
		EnterRule(_localctx, 112, RULE_table_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 853;
			_localctx._table_core_stmt = table_core_stmt();
			_localctx._statements.Add(_localctx._table_core_stmt);
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 2251799822082049L) != 0) {
				{
				{
				State = 854;
				_la = TokenStream.LA(1);
				if ( !((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & 2251799822082049L) != 0) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_ || _la==DISTINCT_) {
					{
					State = 855;
					_la = TokenStream.LA(1);
					if ( !(_la==ALL_ || _la==DISTINCT_) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 858;
				_localctx._table_core_stmt = table_core_stmt();
				_localctx._statements.Add(_localctx._table_core_stmt);
				}
				}
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_core_stmtContext : ParserRuleContext {
		public Table_nameContext _table_name;
		public IList<Table_nameContext> _tables = new List<Table_nameContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_() { return GetToken(MSAccessParser.TABLE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext[] table_name() {
			return GetRuleContexts<Table_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name(int i) {
			return GetRuleContext<Table_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Table_core_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_core_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterTable_core_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitTable_core_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Table_core_stmtContext table_core_stmt() {
		Table_core_stmtContext _localctx = new Table_core_stmtContext(Context, State);
		EnterRule(_localctx, 114, RULE_table_core_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 864;
			Match(TABLE_);
			State = 865;
			_localctx._table_name = table_name();
			_localctx._tables.Add(_localctx._table_name);
			State = 870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 866;
				Match(COMMA);
				State = 867;
				_localctx._table_name = table_name();
				_localctx._tables.Add(_localctx._table_name);
				}
				}
				State = 872;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public IToken distinct;
		public IToken top;
		public IToken limit;
		public IToken percent;
		public Result_columnContext _result_column;
		public IList<Result_columnContext> _resultColumns = new List<Result_columnContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_() { return GetToken(MSAccessParser.SELECT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext[] result_column() {
			return GetRuleContexts<Result_columnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Result_columnContext result_column(int i) {
			return GetRuleContext<Result_columnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP_() { return GetToken(MSAccessParser.TOP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_LITERAL() { return GetToken(MSAccessParser.NUMERIC_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_() { return GetToken(MSAccessParser.DISTINCT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTROW_() { return GetToken(MSAccessParser.DISTINCTROW_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_() { return GetToken(MSAccessParser.ALL_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_() { return GetToken(MSAccessParser.PERCENT_, 0); }
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 116, RULE_select_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 873;
			Match(SELECT_);
			State = 875;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 874;
				_localctx.distinct = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 54043195662663680L) != 0) ) {
					_localctx.distinct = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 877;
				_localctx.top = Match(TOP_);
				State = 878;
				_localctx.limit = Match(NUMERIC_LITERAL);
				State = 880;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
				case 1:
					{
					State = 879;
					_localctx.percent = Match(PERCENT_);
					}
					break;
				}
				}
				break;
			}
			State = 884;
			_localctx._result_column = result_column();
			_localctx._resultColumns.Add(_localctx._result_column);
			State = 889;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 885;
				Match(COMMA);
				State = 886;
				_localctx._result_column = result_column();
				_localctx._resultColumns.Add(_localctx._result_column);
				}
				}
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_into_stmtContext : ParserRuleContext {
		public Select_clauseContext selectClause;
		public Table_nameContext tableName;
		public From_clauseContext fromClause;
		public Join_clauseContext _join_clause;
		public IList<Join_clauseContext> _joinClause = new List<Join_clauseContext>();
		public Where_clauseContext whereClause;
		public Group_by_clauseContext groupByClause;
		public Order_by_clauseContext orderByClause;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_() { return GetToken(MSAccessParser.INTO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Select_into_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_into_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterSelect_into_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitSelect_into_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_into_stmtContext select_into_stmt() {
		Select_into_stmtContext _localctx = new Select_into_stmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_select_into_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 892;
			_localctx.selectClause = select_clause();
			State = 893;
			Match(INTO_);
			State = 894;
			_localctx.tableName = table_name();
			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_) {
				{
				State = 895;
				_localctx.fromClause = from_clause();
				State = 899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 134217857L) != 0) {
					{
					{
					State = 896;
					_localctx._join_clause = join_clause();
					_localctx._joinClause.Add(_localctx._join_clause);
					}
					}
					State = 901;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_) {
					{
					State = 902;
					_localctx.whereClause = where_clause();
					}
				}

				State = 906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GROUP_) {
					{
					State = 905;
					_localctx.groupByClause = group_by_clause();
					}
				}

				State = 909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 908;
					_localctx.orderByClause = order_by_clause();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_core_stmtContext : ParserRuleContext {
		public Select_clauseContext selectClause;
		public From_clauseContext fromClause;
		public Join_clauseContext _join_clause;
		public IList<Join_clauseContext> _joinClause = new List<Join_clauseContext>();
		public Where_clauseContext whereClause;
		public Group_by_clauseContext groupByClause;
		public Order_by_clauseContext orderByClause;
		[System.Diagnostics.DebuggerNonUserCode] public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Group_by_clauseContext group_by_clause() {
			return GetRuleContext<Group_by_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public Select_core_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_core_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterSelect_core_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitSelect_core_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Select_core_stmtContext select_core_stmt() {
		Select_core_stmtContext _localctx = new Select_core_stmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_select_core_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			_localctx.selectClause = select_clause();
			State = 930;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_) {
				{
				State = 914;
				_localctx.fromClause = from_clause();
				State = 918;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 134217857L) != 0) {
					{
					{
					State = 915;
					_localctx._join_clause = join_clause();
					_localctx._joinClause.Add(_localctx._join_clause);
					}
					}
					State = 920;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 922;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_) {
					{
					State = 921;
					_localctx.whereClause = where_clause();
					}
				}

				State = 925;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GROUP_) {
					{
					State = 924;
					_localctx.groupByClause = group_by_clause();
					}
				}

				State = 928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_) {
					{
					State = 927;
					_localctx.orderByClause = order_by_clause();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_or_subqueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext aliased_table_name() {
			return GetRuleContext<Aliased_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXED_() { return GetToken(MSAccessParser.INDEXED_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(MSAccessParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Index_nameContext index_name() {
			return GetRuleContext<Index_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_() { return GetToken(MSAccessParser.NOT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_() { return GetToken(MSAccessParser.AS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		public Table_or_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_or_subquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterTable_or_subquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitTable_or_subquery(this);
		}
	}

	[RuleVersion(0)]
	public Table_or_subqueryContext table_or_subquery() {
		Table_or_subqueryContext _localctx = new Table_or_subqueryContext(Context, State);
		EnterRule(_localctx, 122, RULE_table_or_subquery);
		int _la;
		try {
			State = 988;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 932;
				aliased_table_name();
				State = 938;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INDEXED_:
					{
					State = 933;
					Match(INDEXED_);
					State = 934;
					Match(BY_);
					State = 935;
					index_name();
					}
					break;
				case NOT_:
					{
					State = 936;
					Match(NOT_);
					State = 937;
					Match(INDEXED_);
					}
					break;
				case Eof:
				case SCOL:
				case CLOSE_PAR:
				case COMMA:
				case EXCEPT_:
				case GROUP_:
				case INNER_:
				case INTERSECT_:
				case LEFT_:
				case MINUS_:
				case ON_:
				case ORDER_:
				case RIGHT_:
				case SET_:
				case UNION_:
				case WHERE_:
					break;
				default:
					break;
				}
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 940;
				table_name();
				State = 941;
				Match(OPEN_PAR);
				State = 942;
				expr(0);
				State = 947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 943;
					Match(COMMA);
					State = 944;
					expr(0);
					}
					}
					State = 949;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 950;
				Match(CLOSE_PAR);
				State = 955;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 952;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
					case 1:
						{
						State = 951;
						Match(AS_);
						}
						break;
					}
					State = 954;
					table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 957;
				Match(OPEN_PAR);
				{
				State = 958;
				table_or_subquery();
				State = 963;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 959;
					Match(COMMA);
					State = 960;
					table_or_subquery();
					}
					}
					State = 965;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 969;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 134217857L) != 0) {
					{
					{
					State = 966;
					join_clause();
					}
					}
					State = 971;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 972;
				Match(CLOSE_PAR);
				State = 977;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
				case 1:
					{
					State = 974;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
					case 1:
						{
						State = 973;
						Match(AS_);
						}
						break;
					}
					State = 976;
					table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 979;
				Match(OPEN_PAR);
				State = 980;
				select_stmt();
				State = 981;
				Match(CLOSE_PAR);
				State = 986;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 983;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
					case 1:
						{
						State = 982;
						Match(AS_);
						}
						break;
					}
					State = 985;
					table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_with_joinsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Aliased_table_nameContext aliased_table_name() {
			return GetRuleContext<Aliased_table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR() { return GetToken(MSAccessParser.OPEN_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR() { return GetToken(MSAccessParser.CLOSE_PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_with_joinsContext[] table_with_joins() {
			return GetRuleContexts<Table_with_joinsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_with_joinsContext table_with_joins(int i) {
			return GetRuleContext<Table_with_joinsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		public Table_with_joinsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_with_joins; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterTable_with_joins(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitTable_with_joins(this);
		}
	}

	[RuleVersion(0)]
	public Table_with_joinsContext table_with_joins() {
		Table_with_joinsContext _localctx = new Table_with_joinsContext(Context, State);
		EnterRule(_localctx, 124, RULE_table_with_joins);
		int _la;
		try {
			State = 1008;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 990;
				aliased_table_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 991;
				Match(OPEN_PAR);
				{
				State = 992;
				table_with_joins();
				State = 997;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 993;
					Match(COMMA);
					State = 994;
					table_with_joins();
					}
					}
					State = 999;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 134217857L) != 0) {
					{
					{
					State = 1000;
					join_clause();
					}
					}
					State = 1005;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 1006;
				Match(CLOSE_PAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public Table_or_subqueryContext _table_or_subquery;
		public IList<Table_or_subqueryContext> _tables = new List<Table_or_subqueryContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_() { return GetToken(MSAccessParser.FROM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext[] table_or_subquery() {
			return GetRuleContexts<Table_or_subqueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery(int i) {
			return GetRuleContext<Table_or_subqueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 126, RULE_from_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1010;
			Match(FROM_);
			State = 1011;
			_localctx._table_or_subquery = table_or_subquery();
			_localctx._tables.Add(_localctx._table_or_subquery);
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1012;
				Match(COMMA);
				State = 1013;
				_localctx._table_or_subquery = table_or_subquery();
				_localctx._tables.Add(_localctx._table_or_subquery);
				}
				}
				State = 1018;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1020;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1019;
				where_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public IToken on;
		public ExprContext expression;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_() { return GetToken(MSAccessParser.JOIN_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_or_subqueryContext table_or_subquery() {
			return GetRuleContext<Table_or_subqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_() { return GetToken(MSAccessParser.INNER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_() { return GetToken(MSAccessParser.LEFT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_() { return GetToken(MSAccessParser.RIGHT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_() { return GetToken(MSAccessParser.ON_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_() { return GetToken(MSAccessParser.OUTER_, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 128, RULE_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LEFT_:
			case RIGHT_:
				{
				State = 1022;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT_ || _la==RIGHT_) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER_) {
					{
					State = 1023;
					Match(OUTER_);
					}
				}

				}
				break;
			case INNER_:
				{
				State = 1026;
				Match(INNER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1029;
			Match(JOIN_);
			State = 1030;
			table_or_subquery();
			State = 1033;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_) {
				{
				State = 1031;
				_localctx.on = Match(ON_);
				State = 1032;
				_localctx.expression = expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public ExprContext whereExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(MSAccessParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 130, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			Match(WHERE_);
			State = 1036;
			_localctx.whereExpr = expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_by_clauseContext : ParserRuleContext {
		public ExprContext _expr;
		public IList<ExprContext> _groupingTerms = new List<ExprContext>();
		public ExprContext havingExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_() { return GetToken(MSAccessParser.GROUP_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(MSAccessParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING_() { return GetToken(MSAccessParser.HAVING_, 0); }
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterGroup_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitGroup_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Group_by_clauseContext group_by_clause() {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(Context, State);
		EnterRule(_localctx, 132, RULE_group_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1038;
			Match(GROUP_);
			State = 1039;
			Match(BY_);
			State = 1040;
			_localctx._expr = expr(0);
			_localctx._groupingTerms.Add(_localctx._expr);
			State = 1045;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1041;
				Match(COMMA);
				State = 1042;
				_localctx._expr = expr(0);
				_localctx._groupingTerms.Add(_localctx._expr);
				}
				}
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HAVING_) {
				{
				State = 1048;
				Match(HAVING_);
				State = 1049;
				_localctx.havingExpr = expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public Ordering_termContext _ordering_term;
		public IList<Ordering_termContext> _orderingTerms = new List<Ordering_termContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_() { return GetToken(MSAccessParser.ORDER_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_() { return GetToken(MSAccessParser.BY_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext[] ordering_term() {
			return GetRuleContexts<Ordering_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ordering_termContext ordering_term(int i) {
			return GetRuleContext<Ordering_termContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 134, RULE_order_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			Match(ORDER_);
			State = 1053;
			Match(BY_);
			State = 1054;
			_localctx._ordering_term = ordering_term();
			_localctx._orderingTerms.Add(_localctx._ordering_term);
			State = 1059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1055;
				Match(COMMA);
				State = 1056;
				_localctx._ordering_term = ordering_term();
				_localctx._orderingTerms.Add(_localctx._ordering_term);
				}
				}
				State = 1061;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Insert_stmtContext : ParserRuleContext {
		public Table_nameContext tableName;
		public Column_nameContext _column_name;
		public IList<Column_nameContext> _columnNames = new List<Column_nameContext>();
		public ExprContext _expr;
		public IList<ExprContext> _values = new List<ExprContext>();
		public Select_core_stmtContext subquery;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_() { return GetToken(MSAccessParser.INSERT_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_() { return GetToken(MSAccessParser.INTO_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_() { return GetToken(MSAccessParser.VALUES_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR() { return GetTokens(MSAccessParser.OPEN_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR(int i) {
			return GetToken(MSAccessParser.OPEN_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR() { return GetTokens(MSAccessParser.CLOSE_PAR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(MSAccessParser.CLOSE_PAR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_core_stmtContext select_core_stmt() {
			return GetRuleContext<Select_core_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insert_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterInsert_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitInsert_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Insert_stmtContext insert_stmt() {
		Insert_stmtContext _localctx = new Insert_stmtContext(Context, State);
		EnterRule(_localctx, 136, RULE_insert_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1062;
			Match(INSERT_);
			State = 1063;
			Match(INTO_);
			State = 1064;
			_localctx.tableName = table_name();
			State = 1076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR) {
				{
				State = 1065;
				Match(OPEN_PAR);
				State = 1066;
				_localctx._column_name = column_name();
				_localctx._columnNames.Add(_localctx._column_name);
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1067;
					Match(COMMA);
					State = 1068;
					_localctx._column_name = column_name();
					_localctx._columnNames.Add(_localctx._column_name);
					}
					}
					State = 1073;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1074;
				Match(CLOSE_PAR);
				}
			}

			State = 1091;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VALUES_:
				{
				State = 1078;
				Match(VALUES_);
				State = 1079;
				Match(OPEN_PAR);
				State = 1080;
				_localctx._expr = expr(0);
				_localctx._values.Add(_localctx._expr);
				State = 1085;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1081;
					Match(COMMA);
					State = 1082;
					_localctx._expr = expr(0);
					_localctx._values.Add(_localctx._expr);
					}
					}
					State = 1087;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1088;
				Match(CLOSE_PAR);
				}
				break;
			case SELECT_:
				{
				State = 1090;
				_localctx.subquery = select_core_stmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Update_stmtContext : ParserRuleContext {
		public ExprContext where_expr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_() { return GetToken(MSAccessParser.UPDATE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_with_joinsContext[] table_with_joins() {
			return GetRuleContexts<Table_with_joinsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_with_joinsContext table_with_joins(int i) {
			return GetRuleContext<Table_with_joinsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_() { return GetToken(MSAccessParser.SET_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Prefixed_column_nameContext[] prefixed_column_name() {
			return GetRuleContexts<Prefixed_column_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefixed_column_nameContext prefixed_column_name(int i) {
			return GetRuleContext<Prefixed_column_nameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EQ() { return GetTokens(MSAccessParser.EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ(int i) {
			return GetToken(MSAccessParser.EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(MSAccessParser.WHERE_, 0); }
		public Update_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_update_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterUpdate_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitUpdate_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Update_stmtContext update_stmt() {
		Update_stmtContext _localctx = new Update_stmtContext(Context, State);
		EnterRule(_localctx, 138, RULE_update_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1093;
			Match(UPDATE_);
			State = 1094;
			table_with_joins();
			State = 1099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1095;
				Match(COMMA);
				State = 1096;
				table_with_joins();
				}
				}
				State = 1101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 134217857L) != 0) {
				{
				{
				State = 1102;
				join_clause();
				}
				}
				State = 1107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1108;
			Match(SET_);
			State = 1109;
			prefixed_column_name();
			State = 1110;
			Match(EQ);
			State = 1111;
			expr(0);
			State = 1119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1112;
				Match(COMMA);
				State = 1113;
				prefixed_column_name();
				State = 1114;
				Match(EQ);
				State = 1115;
				expr(0);
				}
				}
				State = 1121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 1122;
				Match(WHERE_);
				State = 1123;
				_localctx.where_expr = expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delete_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_() { return GetToken(MSAccessParser.DELETE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_() { return GetToken(MSAccessParser.FROM_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Table_with_joinsContext[] table_with_joins() {
			return GetRuleContexts<Table_with_joinsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_with_joinsContext table_with_joins(int i) {
			return GetRuleContext<Table_with_joinsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext[] join_clause() {
			return GetRuleContexts<Join_clauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Join_clauseContext join_clause(int i) {
			return GetRuleContext<Join_clauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_() { return GetToken(MSAccessParser.WHERE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Prefixed_starContext prefixed_star() {
			return GetRuleContext<Prefixed_starContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(MSAccessParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCTROW_() { return GetToken(MSAccessParser.DISTINCTROW_, 0); }
		public Delete_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterDelete_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitDelete_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Delete_stmtContext delete_stmt() {
		Delete_stmtContext _localctx = new Delete_stmtContext(Context, State);
		EnterRule(_localctx, 140, RULE_delete_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1126;
			Match(DELETE_);
			State = 1134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				{
				State = 1128;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
				case 1:
					{
					State = 1127;
					Match(DISTINCTROW_);
					}
					break;
				}
				State = 1132;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR:
				case ADD_:
				case ALL_:
				case ALTER_:
				case AND_:
				case AS_:
				case ASC_:
				case BEGIN_:
				case BETWEEN_:
				case BY_:
				case CASCADE_:
				case CASE_:
				case CAST_:
				case CHECK_:
				case COLUMN_:
				case COMMIT_:
				case COMP_:
				case COMPRESSION_:
				case CONSTRAINT_:
				case CREATE_:
				case CURRENT_DATE_:
				case CURRENT_TIME_:
				case CURRENT_TIMESTAMP_:
				case DATABASE_:
				case DEFAULT_:
				case DELETE_:
				case DESC_:
				case DISALLOW_:
				case DISTINCT_:
				case DISTINCTROW_:
				case DROP_:
				case ELSE_:
				case END_:
				case EQV_:
				case ESCAPE_:
				case EXCEPT_:
				case EXISTS_:
				case FOREIGN_:
				case FROM_:
				case GROUP_:
				case HAVING_:
				case IGNORE_:
				case IN_:
				case INDEX_:
				case INDEXED_:
				case INNER_:
				case INSERT_:
				case INTERSECT_:
				case INTO_:
				case IS_:
				case JOIN_:
				case KEY_:
				case LEFT_:
				case ALIKE_:
				case LIKE_:
				case TOP_:
				case MATCH_:
				case MINUS_:
				case NO_:
				case NOT_:
				case NULL_:
				case ON_:
				case OR_:
				case ORDER_:
				case OUTER_:
				case PARAMETERS_:
				case PASSWORD_:
				case PRIMARY_:
				case PROCEDURE_:
				case REFERENCES_:
				case REGEXP_:
				case RIGHT_:
				case ROLLBACK_:
				case SELECT_:
				case SET_:
				case TABLE_:
				case TEMP_:
				case TEMPORARY_:
				case THEN_:
				case TO_:
				case TRANSACTION_:
				case USER_:
				case WORK_:
				case UNION_:
				case UNIQUE_:
				case UPDATE_:
				case VALUES_:
				case VIEW_:
				case WHEN_:
				case WHERE_:
				case WITH_:
				case XOR_:
				case TRUE_:
				case FALSE_:
				case NULLS_:
				case FIRST_:
				case LAST_:
				case OBJECT_:
				case CONTAINER_:
				case GRANT_:
				case REVOKE_:
				case SELECTSECURITY_:
				case UPDATESECURITY_:
				case DBPASSWORD_:
				case UPDATEIDENTITY_:
				case SELECTSCHEMA_:
				case SCHEMA_:
				case UPDATEOWNER_:
				case LONGBINARY_:
				case BINARY_:
				case BIT_:
				case COUNTER_:
				case CURRENCY_:
				case DATE_:
				case TIME_:
				case DATETIME_:
				case TIMESTAMP_:
				case GUID_:
				case LONGTEXT_:
				case SINGLE_:
				case DOUBLE_:
				case UNSIGNED_:
				case BYTE_:
				case SHORT_:
				case INTEGER_:
				case LONG_:
				case NUMERIC_:
				case VARCHAR_:
				case VARBINARY_:
				case YESNO_:
				case TEXT_:
				case REPLICATIONID_:
				case AUTONUMBER_:
				case OLEOBJECT_:
				case MEMO_:
				case HYPERLINK_:
				case PERCENT_:
				case IDENTIFIER:
				case STRING_LITERAL:
					{
					State = 1130;
					prefixed_star();
					}
					break;
				case STAR:
					{
					State = 1131;
					Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			State = 1136;
			Match(FROM_);
			State = 1137;
			table_with_joins();
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1138;
				Match(COMMA);
				State = 1139;
				table_with_joins();
				}
				}
				State = 1144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & 134217857L) != 0) {
				{
				{
				State = 1145;
				join_clause();
				}
				}
				State = 1150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_) {
				{
				State = 1151;
				Match(WHERE_);
				State = 1152;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Procedure_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_() { return GetToken(MSAccessParser.PROCEDURE_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_nameContext procedure_name() {
			return GetRuleContext<Procedure_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_defContext[] param_def() {
			return GetRuleContexts<Param_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_defContext param_def(int i) {
			return GetRuleContext<Param_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Procedure_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedure_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterProcedure_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitProcedure_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Procedure_stmtContext procedure_stmt() {
		Procedure_stmtContext _localctx = new Procedure_stmtContext(Context, State);
		EnterRule(_localctx, 142, RULE_procedure_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			Match(PROCEDURE_);
			State = 1156;
			procedure_name();
			State = 1165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686019568238584L) != 0 || (((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -551903297537L) != 0 || (((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & 2748779069439L) != 0) {
				{
				State = 1157;
				param_def();
				State = 1162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1158;
					Match(COMMA);
					State = 1159;
					param_def();
					}
					}
					State = 1164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameters_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMETERS_() { return GetToken(MSAccessParser.PARAMETERS_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_defContext[] param_def() {
			return GetRuleContexts<Param_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_defContext param_def(int i) {
			return GetRuleContext<Param_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(MSAccessParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(MSAccessParser.COMMA, i);
		}
		public Parameters_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterParameters_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitParameters_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Parameters_stmtContext parameters_stmt() {
		Parameters_stmtContext _localctx = new Parameters_stmtContext(Context, State);
		EnterRule(_localctx, 144, RULE_parameters_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1167;
			Match(PARAMETERS_);
			State = 1168;
			param_def();
			State = 1173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1169;
				Match(COMMA);
				State = 1170;
				param_def();
				}
				}
				State = 1175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Alter_table_stmtContext alter_table_stmt() {
			return GetRuleContext<Alter_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Begin_stmtContext begin_stmt() {
			return GetRuleContext<Begin_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Commit_stmtContext commit_stmt() {
			return GetRuleContext<Commit_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_index_stmtContext create_index_stmt() {
			return GetRuleContext<Create_index_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_table_stmtContext create_table_stmt() {
			return GetRuleContext<Create_table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_procedure_stmtContext create_procedure_stmt() {
			return GetRuleContext<Create_procedure_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Procedure_stmtContext procedure_stmt() {
			return GetRuleContext<Procedure_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_view_stmtContext create_view_stmt() {
			return GetRuleContext<Create_view_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Delete_stmtContext delete_stmt() {
			return GetRuleContext<Delete_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_stmtContext drop_stmt() {
			return GetRuleContext<Drop_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Insert_stmtContext insert_stmt() {
			return GetRuleContext<Insert_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rollback_stmtContext rollback_stmt() {
			return GetRuleContext<Rollback_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_stmtContext select_stmt() {
			return GetRuleContext<Select_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Table_stmtContext table_stmt() {
			return GetRuleContext<Table_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Select_into_stmtContext select_into_stmt() {
			return GetRuleContext<Select_into_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Update_stmtContext update_stmt() {
			return GetRuleContext<Update_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Parameters_stmtContext parameters_stmt() {
			return GetRuleContext<Parameters_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_user_stmtContext create_user_stmt() {
			return GetRuleContext<Create_user_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Create_group_stmtContext create_group_stmt() {
			return GetRuleContext<Create_group_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_user_stmtContext drop_user_stmt() {
			return GetRuleContext<Drop_user_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Drop_group_stmtContext drop_group_stmt() {
			return GetRuleContext<Drop_group_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Alter_password_stmtContext alter_password_stmt() {
			return GetRuleContext<Alter_password_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_user_stmtContext add_user_stmt() {
			return GetRuleContext<Add_user_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Grant_stmtContext grant_stmt() {
			return GetRuleContext<Grant_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Revoke_stmtContext revoke_stmt() {
			return GetRuleContext<Revoke_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Exec_stmtContext exec_stmt() {
			return GetRuleContext<Exec_stmtContext>(0);
		}
		public Sql_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterSql_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitSql_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmtContext sql_stmt() {
		Sql_stmtContext _localctx = new Sql_stmtContext(Context, State);
		EnterRule(_localctx, 146, RULE_sql_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1176;
				alter_table_stmt();
				}
				break;
			case 2:
				{
				State = 1177;
				begin_stmt();
				}
				break;
			case 3:
				{
				State = 1178;
				commit_stmt();
				}
				break;
			case 4:
				{
				State = 1179;
				create_index_stmt();
				}
				break;
			case 5:
				{
				State = 1180;
				create_table_stmt();
				}
				break;
			case 6:
				{
				State = 1181;
				create_procedure_stmt();
				}
				break;
			case 7:
				{
				State = 1182;
				procedure_stmt();
				}
				break;
			case 8:
				{
				State = 1183;
				create_view_stmt();
				}
				break;
			case 9:
				{
				State = 1184;
				delete_stmt();
				}
				break;
			case 10:
				{
				State = 1185;
				drop_stmt();
				}
				break;
			case 11:
				{
				State = 1186;
				insert_stmt();
				}
				break;
			case 12:
				{
				State = 1187;
				rollback_stmt();
				}
				break;
			case 13:
				{
				State = 1188;
				select_stmt();
				}
				break;
			case 14:
				{
				State = 1189;
				table_stmt();
				}
				break;
			case 15:
				{
				State = 1190;
				select_into_stmt();
				}
				break;
			case 16:
				{
				State = 1191;
				update_stmt();
				}
				break;
			case 17:
				{
				State = 1192;
				parameters_stmt();
				}
				break;
			case 18:
				{
				State = 1193;
				create_user_stmt();
				}
				break;
			case 19:
				{
				State = 1194;
				create_group_stmt();
				}
				break;
			case 20:
				{
				State = 1195;
				drop_user_stmt();
				}
				break;
			case 21:
				{
				State = 1196;
				drop_group_stmt();
				}
				break;
			case 22:
				{
				State = 1197;
				alter_password_stmt();
				}
				break;
			case 23:
				{
				State = 1198;
				add_user_stmt();
				}
				break;
			case 24:
				{
				State = 1199;
				grant_stmt();
				}
				break;
			case 25:
				{
				State = 1200;
				revoke_stmt();
				}
				break;
			case 26:
				{
				State = 1201;
				exec_stmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_stmt_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext[] sql_stmt() {
			return GetRuleContexts<Sql_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmtContext sql_stmt(int i) {
			return GetRuleContext<Sql_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SCOL() { return GetTokens(MSAccessParser.SCOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCOL(int i) {
			return GetToken(MSAccessParser.SCOL, i);
		}
		public Sql_stmt_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_stmt_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterSql_stmt_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitSql_stmt_list(this);
		}
	}

	[RuleVersion(0)]
	public Sql_stmt_listContext sql_stmt_list() {
		Sql_stmt_listContext _localctx = new Sql_stmt_listContext(Context, State);
		EnterRule(_localctx, 148, RULE_sql_stmt_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 1204;
				Match(SCOL);
				}
				}
				State = 1209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1210;
			sql_stmt();
			State = 1219;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1212;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 1211;
						Match(SCOL);
						}
						}
						State = 1214;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 1216;
					sql_stmt();
					}
					} 
				}
				State = 1221;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,145,Context);
			}
			State = 1225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 1222;
				Match(SCOL);
				}
				}
				State = 1227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MSAccessParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sql_stmt_listContext sql_stmt_list() {
			return GetRuleContext<Sql_stmt_listContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMSAccessParserListener typedListener = listener as IMSAccessParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 150, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4686032804599824386L) != 0 || (((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 108088592639197185L) != 0) {
				{
				State = 1228;
				sql_stmt_list();
				}
			}

			State = 1231;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 16);
		case 1: return Precpred(Context, 15);
		case 2: return Precpred(Context, 14);
		case 3: return Precpred(Context, 13);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		case 10: return Precpred(Context, 12);
		case 11: return Precpred(Context, 10);
		case 12: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,175,1234,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,1,1,1,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,185,8,2,1,3,1,3,1,4,1,4,1,5,
		1,5,1,5,1,5,1,5,1,5,1,5,3,5,198,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,
		10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,3,15,220,8,15,
		1,15,3,15,223,8,15,1,16,1,16,1,17,1,17,3,17,229,8,17,1,17,1,17,3,17,233,
		8,17,1,18,3,18,236,8,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,3,19,245,8,
		19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,259,
		8,21,3,21,261,8,21,1,22,1,22,1,22,3,22,266,8,22,1,22,1,22,1,22,3,22,271,
		8,22,1,22,3,22,274,8,22,1,22,3,22,277,8,22,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,5,24,286,8,24,10,24,12,24,289,9,24,1,24,1,24,1,25,1,25,1,25,1,
		25,1,25,3,25,298,8,25,3,25,300,8,25,1,26,1,26,3,26,304,8,26,1,26,3,26,
		307,8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,334,
		8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,343,8,32,1,32,1,32,1,32,1,
		32,1,32,4,32,350,8,32,11,32,12,32,351,1,32,1,32,3,32,356,8,32,1,32,1,32,
		1,32,1,32,1,32,3,32,363,8,32,1,32,1,32,3,32,367,8,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,384,8,32,
		1,32,1,32,1,32,3,32,389,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
		32,1,32,1,32,1,32,3,32,417,8,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,425,
		8,32,10,32,12,32,428,9,32,3,32,430,8,32,1,32,1,32,1,32,1,32,3,32,436,8,
		32,1,32,1,32,1,32,1,32,3,32,442,8,32,5,32,444,8,32,10,32,12,32,447,9,32,
		1,33,1,33,1,33,1,33,1,33,5,33,454,8,33,10,33,12,33,457,9,33,1,33,3,33,
		460,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,
		34,474,8,34,10,34,12,34,477,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
		35,5,35,487,8,35,10,35,12,35,490,9,35,1,36,1,36,1,36,1,36,1,36,5,36,497,
		8,36,10,36,12,36,500,9,36,1,36,1,36,3,36,504,8,36,1,37,1,37,1,37,1,37,
		1,37,5,37,511,8,37,10,37,12,37,514,9,37,1,38,1,38,1,38,1,38,3,38,520,8,
		38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,5,39,531,8,39,10,39,12,
		39,534,9,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,543,8,40,10,40,12,
		40,546,9,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,5,40,555,8,40,10,40,12,
		40,558,9,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		5,41,572,8,41,10,41,12,41,575,9,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
		3,42,584,8,42,1,42,1,42,1,42,1,42,1,42,3,42,591,8,42,1,42,1,42,1,42,1,
		42,3,42,597,8,42,3,42,599,8,42,1,43,1,43,3,43,603,8,43,1,44,1,44,3,44,
		607,8,44,1,45,1,45,3,45,611,8,45,1,46,1,46,1,46,1,46,1,46,3,46,618,8,46,
		1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,629,8,47,1,47,5,47,632,
		8,47,10,47,12,47,635,9,47,1,47,1,47,1,47,1,47,1,47,3,47,642,8,47,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,652,8,48,10,48,12,48,655,9,48,
		1,48,1,48,3,48,659,8,48,1,48,1,48,1,48,1,48,1,48,5,48,666,8,48,10,48,12,
		48,669,9,48,1,48,1,48,3,48,673,8,48,1,48,1,48,1,48,1,48,3,48,679,8,48,
		1,48,1,48,1,48,1,48,5,48,685,8,48,10,48,12,48,688,9,48,1,48,1,48,1,48,
		1,48,1,48,1,48,1,48,5,48,697,8,48,10,48,12,48,700,9,48,1,48,1,48,3,48,
		704,8,48,1,48,5,48,707,8,48,10,48,12,48,710,9,48,1,48,1,48,1,48,1,48,1,
		48,3,48,717,8,48,1,49,1,49,1,49,1,50,1,50,3,50,724,8,50,1,50,1,50,1,50,
		1,50,1,50,1,50,5,50,732,8,50,10,50,12,50,735,9,50,1,50,1,50,5,50,739,8,
		50,10,50,12,50,742,9,50,1,50,1,50,1,50,1,50,3,50,748,8,50,1,51,1,51,1,
		51,1,51,1,51,1,51,1,51,5,51,757,8,51,10,51,12,51,760,9,51,1,51,1,51,3,
		51,764,8,51,1,51,1,51,1,51,1,52,1,52,3,52,771,8,52,1,52,1,52,1,52,1,52,
		1,52,1,52,1,52,3,52,780,8,52,1,52,1,52,1,52,3,52,785,8,52,5,52,787,8,52,
		10,52,12,52,790,9,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,799,8,52,
		3,52,801,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,5,53,810,8,53,10,53,12,
		53,813,9,53,1,53,1,53,3,53,817,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
		3,53,826,8,53,1,54,1,54,1,54,1,54,1,54,1,54,3,54,834,8,54,1,54,1,54,1,
		54,1,54,1,54,3,54,841,8,54,1,55,1,55,1,55,3,55,846,8,55,1,55,5,55,849,
		8,55,10,55,12,55,852,9,55,1,56,1,56,1,56,3,56,857,8,56,1,56,5,56,860,8,
		56,10,56,12,56,863,9,56,1,57,1,57,1,57,1,57,5,57,869,8,57,10,57,12,57,
		872,9,57,1,58,1,58,3,58,876,8,58,1,58,1,58,1,58,3,58,881,8,58,3,58,883,
		8,58,1,58,1,58,1,58,5,58,888,8,58,10,58,12,58,891,9,58,1,59,1,59,1,59,
		1,59,1,59,5,59,898,8,59,10,59,12,59,901,9,59,1,59,3,59,904,8,59,1,59,3,
		59,907,8,59,1,59,3,59,910,8,59,3,59,912,8,59,1,60,1,60,1,60,5,60,917,8,
		60,10,60,12,60,920,9,60,1,60,3,60,923,8,60,1,60,3,60,926,8,60,1,60,3,60,
		929,8,60,3,60,931,8,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,939,8,61,1,61,
		1,61,1,61,1,61,1,61,5,61,946,8,61,10,61,12,61,949,9,61,1,61,1,61,3,61,
		953,8,61,1,61,3,61,956,8,61,1,61,1,61,1,61,1,61,5,61,962,8,61,10,61,12,
		61,965,9,61,1,61,5,61,968,8,61,10,61,12,61,971,9,61,1,61,1,61,3,61,975,
		8,61,1,61,3,61,978,8,61,1,61,1,61,1,61,1,61,3,61,984,8,61,1,61,3,61,987,
		8,61,3,61,989,8,61,1,62,1,62,1,62,1,62,1,62,5,62,996,8,62,10,62,12,62,
		999,9,62,1,62,5,62,1002,8,62,10,62,12,62,1005,9,62,1,62,1,62,3,62,1009,
		8,62,1,63,1,63,1,63,1,63,5,63,1015,8,63,10,63,12,63,1018,9,63,1,63,3,63,
		1021,8,63,1,64,1,64,3,64,1025,8,64,1,64,3,64,1028,8,64,1,64,1,64,1,64,
		1,64,3,64,1034,8,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,5,66,1044,
		8,66,10,66,12,66,1047,9,66,1,66,1,66,3,66,1051,8,66,1,67,1,67,1,67,1,67,
		1,67,5,67,1058,8,67,10,67,12,67,1061,9,67,1,68,1,68,1,68,1,68,1,68,1,68,
		1,68,5,68,1070,8,68,10,68,12,68,1073,9,68,1,68,1,68,3,68,1077,8,68,1,68,
		1,68,1,68,1,68,1,68,5,68,1084,8,68,10,68,12,68,1087,9,68,1,68,1,68,1,68,
		3,68,1092,8,68,1,69,1,69,1,69,1,69,5,69,1098,8,69,10,69,12,69,1101,9,69,
		1,69,5,69,1104,8,69,10,69,12,69,1107,9,69,1,69,1,69,1,69,1,69,1,69,1,69,
		1,69,1,69,1,69,5,69,1118,8,69,10,69,12,69,1121,9,69,1,69,1,69,3,69,1125,
		8,69,1,70,1,70,3,70,1129,8,70,1,70,1,70,3,70,1133,8,70,3,70,1135,8,70,
		1,70,1,70,1,70,1,70,5,70,1141,8,70,10,70,12,70,1144,9,70,1,70,5,70,1147,
		8,70,10,70,12,70,1150,9,70,1,70,1,70,3,70,1154,8,70,1,71,1,71,1,71,1,71,
		1,71,5,71,1161,8,71,10,71,12,71,1164,9,71,3,71,1166,8,71,1,72,1,72,1,72,
		1,72,5,72,1172,8,72,10,72,12,72,1175,9,72,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
		1,73,1,73,1,73,1,73,1,73,1,73,3,73,1203,8,73,1,74,5,74,1206,8,74,10,74,
		12,74,1209,9,74,1,74,1,74,4,74,1213,8,74,11,74,12,74,1214,1,74,5,74,1218,
		8,74,10,74,12,74,1221,9,74,1,74,5,74,1224,8,74,10,74,12,74,1227,9,74,1,
		75,3,75,1230,8,75,1,75,1,75,1,75,0,1,64,76,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
		114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
		150,0,22,5,0,26,29,31,61,63,94,96,102,104,165,7,0,45,45,51,51,56,56,73,
		73,101,101,114,114,130,136,5,0,46,48,87,87,121,122,167,167,169,171,2,0,
		166,166,169,169,2,0,32,32,52,52,1,0,124,125,1,0,9,10,2,0,9,10,86,86,2,
		0,8,8,12,14,1,0,19,25,3,0,27,27,30,30,103,103,3,0,80,81,83,83,98,98,2,
		0,104,104,126,127,2,0,109,109,111,111,2,0,51,51,114,114,1,0,105,106,1,
		0,95,96,2,0,96,96,116,116,4,0,61,61,74,74,84,84,112,112,2,0,27,27,54,54,
		2,0,27,27,54,55,2,0,79,79,99,99,1393,0,152,1,0,0,0,2,154,1,0,0,0,4,184,
		1,0,0,0,6,186,1,0,0,0,8,188,1,0,0,0,10,197,1,0,0,0,12,199,1,0,0,0,14,201,
		1,0,0,0,16,203,1,0,0,0,18,205,1,0,0,0,20,207,1,0,0,0,22,209,1,0,0,0,24,
		211,1,0,0,0,26,213,1,0,0,0,28,215,1,0,0,0,30,217,1,0,0,0,32,224,1,0,0,
		0,34,226,1,0,0,0,36,235,1,0,0,0,38,239,1,0,0,0,40,246,1,0,0,0,42,249,1,
		0,0,0,44,262,1,0,0,0,46,278,1,0,0,0,48,287,1,0,0,0,50,299,1,0,0,0,52,306,
		1,0,0,0,54,308,1,0,0,0,56,310,1,0,0,0,58,312,1,0,0,0,60,314,1,0,0,0,62,
		316,1,0,0,0,64,366,1,0,0,0,66,448,1,0,0,0,68,463,1,0,0,0,70,478,1,0,0,
		0,72,491,1,0,0,0,74,505,1,0,0,0,76,515,1,0,0,0,78,525,1,0,0,0,80,538,1,
		0,0,0,82,559,1,0,0,0,84,576,1,0,0,0,86,600,1,0,0,0,88,604,1,0,0,0,90,608,
		1,0,0,0,92,612,1,0,0,0,94,641,1,0,0,0,96,643,1,0,0,0,98,718,1,0,0,0,100,
		721,1,0,0,0,102,749,1,0,0,0,104,768,1,0,0,0,106,802,1,0,0,0,108,827,1,
		0,0,0,110,842,1,0,0,0,112,853,1,0,0,0,114,864,1,0,0,0,116,873,1,0,0,0,
		118,892,1,0,0,0,120,913,1,0,0,0,122,988,1,0,0,0,124,1008,1,0,0,0,126,1010,
		1,0,0,0,128,1027,1,0,0,0,130,1035,1,0,0,0,132,1038,1,0,0,0,134,1052,1,
		0,0,0,136,1062,1,0,0,0,138,1093,1,0,0,0,140,1126,1,0,0,0,142,1155,1,0,
		0,0,144,1167,1,0,0,0,146,1202,1,0,0,0,148,1207,1,0,0,0,150,1229,1,0,0,
		0,152,153,7,0,0,0,153,1,1,0,0,0,154,155,7,1,0,0,155,3,1,0,0,0,156,185,
		5,137,0,0,157,185,5,138,0,0,158,185,5,139,0,0,159,185,5,140,0,0,160,185,
		5,141,0,0,161,185,5,142,0,0,162,185,5,143,0,0,163,185,5,144,0,0,164,185,
		5,145,0,0,165,185,5,146,0,0,166,185,5,147,0,0,167,185,5,148,0,0,168,185,
		5,149,0,0,169,170,5,150,0,0,170,185,5,151,0,0,171,185,5,152,0,0,172,185,
		5,153,0,0,173,185,5,154,0,0,174,185,5,155,0,0,175,185,5,156,0,0,176,185,
		5,157,0,0,177,185,5,158,0,0,178,185,5,159,0,0,179,185,5,160,0,0,180,185,
		5,161,0,0,181,185,5,162,0,0,182,185,5,163,0,0,183,185,5,164,0,0,184,156,
		1,0,0,0,184,157,1,0,0,0,184,158,1,0,0,0,184,159,1,0,0,0,184,160,1,0,0,
		0,184,161,1,0,0,0,184,162,1,0,0,0,184,163,1,0,0,0,184,164,1,0,0,0,184,
		165,1,0,0,0,184,166,1,0,0,0,184,167,1,0,0,0,184,168,1,0,0,0,184,169,1,
		0,0,0,184,171,1,0,0,0,184,172,1,0,0,0,184,173,1,0,0,0,184,174,1,0,0,0,
		184,175,1,0,0,0,184,176,1,0,0,0,184,177,1,0,0,0,184,178,1,0,0,0,184,179,
		1,0,0,0,184,180,1,0,0,0,184,181,1,0,0,0,184,182,1,0,0,0,184,183,1,0,0,
		0,185,5,1,0,0,0,186,187,7,2,0,0,187,7,1,0,0,0,188,189,7,3,0,0,189,9,1,
		0,0,0,190,198,5,166,0,0,191,198,3,0,0,0,192,198,5,169,0,0,193,194,5,3,
		0,0,194,195,3,10,5,0,195,196,5,4,0,0,196,198,1,0,0,0,197,190,1,0,0,0,197,
		191,1,0,0,0,197,192,1,0,0,0,197,193,1,0,0,0,198,11,1,0,0,0,199,200,3,10,
		5,0,200,13,1,0,0,0,201,202,3,10,5,0,202,15,1,0,0,0,203,204,3,10,5,0,204,
		17,1,0,0,0,205,206,3,10,5,0,206,19,1,0,0,0,207,208,3,10,5,0,208,21,1,0,
		0,0,209,210,3,10,5,0,210,23,1,0,0,0,211,212,3,10,5,0,212,25,1,0,0,0,213,
		214,3,10,5,0,214,27,1,0,0,0,215,216,3,10,5,0,216,29,1,0,0,0,217,222,3,
		16,8,0,218,220,5,31,0,0,219,218,1,0,0,0,219,220,1,0,0,0,220,221,1,0,0,
		0,221,223,3,28,14,0,222,219,1,0,0,0,222,223,1,0,0,0,223,31,1,0,0,0,224,
		225,7,4,0,0,225,33,1,0,0,0,226,228,3,64,32,0,227,229,7,4,0,0,228,227,1,
		0,0,0,228,229,1,0,0,0,229,232,1,0,0,0,230,231,5,123,0,0,231,233,7,5,0,
		0,232,230,1,0,0,0,232,233,1,0,0,0,233,35,1,0,0,0,234,236,7,6,0,0,235,234,
		1,0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,238,5,167,0,0,238,37,1,0,0,
		0,239,240,3,24,12,0,240,244,3,4,2,0,241,242,5,3,0,0,242,243,5,167,0,0,
		243,245,5,4,0,0,244,241,1,0,0,0,244,245,1,0,0,0,245,39,1,0,0,0,246,247,
		5,3,0,0,247,248,5,4,0,0,248,41,1,0,0,0,249,260,5,50,0,0,250,261,3,36,18,
		0,251,261,3,6,3,0,252,253,5,3,0,0,253,254,3,64,32,0,254,255,5,4,0,0,255,
		261,1,0,0,0,256,258,5,166,0,0,257,259,3,40,20,0,258,257,1,0,0,0,258,259,
		1,0,0,0,259,261,1,0,0,0,260,250,1,0,0,0,260,251,1,0,0,0,260,252,1,0,0,
		0,260,256,1,0,0,0,261,43,1,0,0,0,262,265,3,38,19,0,263,264,5,86,0,0,264,
		266,5,87,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,270,1,0,0,0,267,268,5,
		119,0,0,268,271,5,43,0,0,269,271,5,42,0,0,270,267,1,0,0,0,270,269,1,0,
		0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,274,3,42,21,0,273,272,1,0,0,0,
		273,274,1,0,0,0,274,276,1,0,0,0,275,277,3,94,47,0,276,275,1,0,0,0,276,
		277,1,0,0,0,277,45,1,0,0,0,278,279,3,16,8,0,279,280,5,2,0,0,280,281,5,
		8,0,0,281,47,1,0,0,0,282,283,3,16,8,0,283,284,5,2,0,0,284,286,1,0,0,0,
		285,282,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,
		1,0,0,0,289,287,1,0,0,0,290,291,3,18,9,0,291,49,1,0,0,0,292,300,5,8,0,
		0,293,300,3,46,23,0,294,297,3,64,32,0,295,296,5,31,0,0,296,298,3,8,4,0,
		297,295,1,0,0,0,297,298,1,0,0,0,298,300,1,0,0,0,299,292,1,0,0,0,299,293,
		1,0,0,0,299,294,1,0,0,0,300,51,1,0,0,0,301,307,3,46,23,0,302,304,5,54,
		0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,307,3,64,32,0,
		306,301,1,0,0,0,306,303,1,0,0,0,307,53,1,0,0,0,308,309,5,166,0,0,309,55,
		1,0,0,0,310,311,5,166,0,0,311,57,1,0,0,0,312,313,5,166,0,0,313,59,1,0,
		0,0,314,315,5,169,0,0,315,61,1,0,0,0,316,317,5,167,0,0,317,63,1,0,0,0,
		318,319,6,32,-1,0,319,367,3,6,3,0,320,367,5,168,0,0,321,367,3,48,24,0,
		322,323,7,7,0,0,323,367,3,64,32,19,324,367,3,66,33,0,325,326,5,38,0,0,
		326,327,5,3,0,0,327,328,3,64,32,0,328,329,5,31,0,0,329,330,3,4,2,0,330,
		331,5,4,0,0,331,367,1,0,0,0,332,334,5,86,0,0,333,332,1,0,0,0,333,334,1,
		0,0,0,334,335,1,0,0,0,335,336,5,63,0,0,336,337,5,3,0,0,337,338,3,110,55,
		0,338,339,5,4,0,0,339,367,1,0,0,0,340,342,5,37,0,0,341,343,3,64,32,0,342,
		341,1,0,0,0,342,343,1,0,0,0,343,349,1,0,0,0,344,345,5,117,0,0,345,346,
		3,64,32,0,346,347,5,107,0,0,347,348,3,64,32,0,348,350,1,0,0,0,349,344,
		1,0,0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,355,1,0,0,
		0,353,354,5,57,0,0,354,356,3,64,32,0,355,353,1,0,0,0,355,356,1,0,0,0,356,
		357,1,0,0,0,357,358,5,58,0,0,358,367,1,0,0,0,359,362,5,3,0,0,360,363,3,
		110,55,0,361,363,3,64,32,0,362,360,1,0,0,0,362,361,1,0,0,0,363,364,1,0,
		0,0,364,365,5,4,0,0,365,367,1,0,0,0,366,318,1,0,0,0,366,320,1,0,0,0,366,
		321,1,0,0,0,366,322,1,0,0,0,366,324,1,0,0,0,366,325,1,0,0,0,366,333,1,
		0,0,0,366,340,1,0,0,0,366,359,1,0,0,0,367,445,1,0,0,0,368,369,10,16,0,
		0,369,370,5,17,0,0,370,444,3,64,32,17,371,372,10,15,0,0,372,373,7,8,0,
		0,373,444,3,64,32,16,374,375,10,14,0,0,375,376,7,6,0,0,376,444,3,64,32,
		15,377,378,10,13,0,0,378,379,7,9,0,0,379,444,3,64,32,14,380,381,10,11,
		0,0,381,383,5,76,0,0,382,384,5,86,0,0,383,382,1,0,0,0,383,384,1,0,0,0,
		384,385,1,0,0,0,385,444,3,64,32,12,386,388,10,8,0,0,387,389,5,86,0,0,388,
		387,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,5,34,0,0,391,392,3,
		64,32,0,392,393,5,29,0,0,393,394,3,64,32,9,394,444,1,0,0,0,395,396,10,
		7,0,0,396,397,5,120,0,0,397,444,3,64,32,8,398,399,10,6,0,0,399,400,5,29,
		0,0,400,444,3,64,32,7,401,402,10,5,0,0,402,403,5,89,0,0,403,444,3,64,32,
		6,404,405,10,4,0,0,405,406,5,59,0,0,406,444,3,64,32,5,407,408,10,12,0,
		0,408,409,7,9,0,0,409,410,7,10,0,0,410,411,5,3,0,0,411,412,3,110,55,0,
		412,413,5,4,0,0,413,444,1,0,0,0,414,416,10,10,0,0,415,417,5,86,0,0,416,
		415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,5,69,0,0,419,429,5,
		3,0,0,420,430,3,110,55,0,421,426,3,64,32,0,422,423,5,7,0,0,423,425,3,64,
		32,0,424,422,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,
		430,1,0,0,0,428,426,1,0,0,0,429,420,1,0,0,0,429,421,1,0,0,0,430,431,1,
		0,0,0,431,432,5,4,0,0,432,444,1,0,0,0,433,435,10,9,0,0,434,436,5,86,0,
		0,435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,438,7,11,0,0,438,
		441,3,64,32,0,439,440,5,60,0,0,440,442,3,64,32,0,441,439,1,0,0,0,441,442,
		1,0,0,0,442,444,1,0,0,0,443,368,1,0,0,0,443,371,1,0,0,0,443,374,1,0,0,
		0,443,377,1,0,0,0,443,380,1,0,0,0,443,386,1,0,0,0,443,395,1,0,0,0,443,
		398,1,0,0,0,443,401,1,0,0,0,443,404,1,0,0,0,443,407,1,0,0,0,443,414,1,
		0,0,0,443,433,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,
		446,65,1,0,0,0,447,445,1,0,0,0,448,449,3,14,7,0,449,459,5,3,0,0,450,455,
		3,52,26,0,451,452,5,7,0,0,452,454,3,52,26,0,453,451,1,0,0,0,454,457,1,
		0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,460,1,0,0,0,457,455,1,0,0,0,
		458,460,5,8,0,0,459,450,1,0,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,461,
		1,0,0,0,461,462,5,4,0,0,462,67,1,0,0,0,463,464,5,45,0,0,464,465,5,110,
		0,0,465,466,3,54,27,0,466,467,3,60,30,0,467,475,3,62,31,0,468,469,5,7,
		0,0,469,470,3,54,27,0,470,471,3,60,30,0,471,472,3,62,31,0,472,474,1,0,
		0,0,473,468,1,0,0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,
		69,1,0,0,0,477,475,1,0,0,0,478,479,5,45,0,0,479,480,5,66,0,0,480,481,3,
		56,28,0,481,488,3,62,31,0,482,483,5,7,0,0,483,484,3,56,28,0,484,485,3,
		62,31,0,485,487,1,0,0,0,486,482,1,0,0,0,487,490,1,0,0,0,488,486,1,0,0,
		0,488,489,1,0,0,0,489,71,1,0,0,0,490,488,1,0,0,0,491,492,5,56,0,0,492,
		493,5,110,0,0,493,498,3,54,27,0,494,495,5,7,0,0,495,497,3,54,27,0,496,
		494,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,503,1,
		0,0,0,500,498,1,0,0,0,501,502,5,65,0,0,502,504,3,56,28,0,503,501,1,0,0,
		0,503,504,1,0,0,0,504,73,1,0,0,0,505,506,5,56,0,0,506,507,5,66,0,0,507,
		512,3,56,28,0,508,509,5,7,0,0,509,511,3,56,28,0,510,508,1,0,0,0,511,514,
		1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,75,1,0,0,0,514,512,1,0,0,0,
		515,519,5,28,0,0,516,520,5,49,0,0,517,518,5,110,0,0,518,520,3,54,27,0,
		519,516,1,0,0,0,519,517,1,0,0,0,520,521,1,0,0,0,521,522,5,93,0,0,522,523,
		3,60,30,0,523,524,3,60,30,0,524,77,1,0,0,0,525,526,5,26,0,0,526,527,5,
		110,0,0,527,532,3,54,27,0,528,529,5,7,0,0,529,531,3,54,27,0,530,528,1,
		0,0,0,531,534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,535,1,0,0,0,
		534,532,1,0,0,0,535,536,5,108,0,0,536,537,3,56,28,0,537,79,1,0,0,0,538,
		539,5,128,0,0,539,544,3,2,1,0,540,541,5,7,0,0,541,543,3,2,1,0,542,540,
		1,0,0,0,543,546,1,0,0,0,544,542,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,
		0,546,544,1,0,0,0,547,548,5,88,0,0,548,549,7,12,0,0,549,550,3,10,5,0,550,
		551,5,108,0,0,551,556,3,58,29,0,552,553,5,7,0,0,553,555,3,58,29,0,554,
		552,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,81,1,0,
		0,0,558,556,1,0,0,0,559,560,5,129,0,0,560,561,3,2,1,0,561,562,5,7,0,0,
		562,563,3,2,1,0,563,564,1,0,0,0,564,565,5,88,0,0,565,566,7,12,0,0,566,
		567,3,10,5,0,567,568,5,65,0,0,568,573,3,58,29,0,569,570,5,7,0,0,570,572,
		3,58,29,0,571,569,1,0,0,0,572,575,1,0,0,0,573,571,1,0,0,0,573,574,1,0,
		0,0,574,83,1,0,0,0,575,573,1,0,0,0,576,577,5,28,0,0,577,578,5,104,0,0,
		578,598,3,16,8,0,579,583,5,26,0,0,580,581,5,40,0,0,581,584,3,38,19,0,582,
		584,3,96,48,0,583,580,1,0,0,0,583,582,1,0,0,0,584,599,1,0,0,0,585,590,
		5,56,0,0,586,587,5,40,0,0,587,591,3,18,9,0,588,589,5,44,0,0,589,591,3,
		20,10,0,590,586,1,0,0,0,590,588,1,0,0,0,591,599,1,0,0,0,592,596,5,28,0,
		0,593,594,5,40,0,0,594,597,3,38,19,0,595,597,3,96,48,0,596,593,1,0,0,0,
		596,595,1,0,0,0,597,599,1,0,0,0,598,579,1,0,0,0,598,585,1,0,0,0,598,592,
		1,0,0,0,599,85,1,0,0,0,600,602,5,33,0,0,601,603,5,109,0,0,602,601,1,0,
		0,0,602,603,1,0,0,0,603,87,1,0,0,0,604,606,5,41,0,0,605,607,7,13,0,0,606,
		605,1,0,0,0,606,607,1,0,0,0,607,89,1,0,0,0,608,610,5,100,0,0,609,611,7,
		13,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,91,1,0,0,0,612,613,5,88,0,0,
		613,617,7,14,0,0,614,618,5,36,0,0,615,616,5,102,0,0,616,618,5,87,0,0,617,
		614,1,0,0,0,617,615,1,0,0,0,618,93,1,0,0,0,619,620,5,94,0,0,620,642,5,
		78,0,0,621,642,5,113,0,0,622,623,5,97,0,0,623,628,3,16,8,0,624,625,5,3,
		0,0,625,626,3,18,9,0,626,627,5,4,0,0,627,629,1,0,0,0,628,624,1,0,0,0,628,
		629,1,0,0,0,629,633,1,0,0,0,630,632,3,92,46,0,631,630,1,0,0,0,632,635,
		1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,642,1,0,0,0,635,633,1,0,0,
		0,636,637,5,39,0,0,637,638,5,3,0,0,638,639,3,64,32,0,639,640,5,4,0,0,640,
		642,1,0,0,0,641,619,1,0,0,0,641,621,1,0,0,0,641,622,1,0,0,0,641,636,1,
		0,0,0,642,95,1,0,0,0,643,644,5,44,0,0,644,716,3,12,6,0,645,646,5,94,0,
		0,646,658,5,78,0,0,647,648,5,3,0,0,648,653,3,18,9,0,649,650,5,7,0,0,650,
		652,3,18,9,0,651,649,1,0,0,0,652,655,1,0,0,0,653,651,1,0,0,0,653,654,1,
		0,0,0,654,656,1,0,0,0,655,653,1,0,0,0,656,657,5,4,0,0,657,659,1,0,0,0,
		658,647,1,0,0,0,658,659,1,0,0,0,659,717,1,0,0,0,660,672,5,113,0,0,661,
		662,5,3,0,0,662,667,3,18,9,0,663,664,5,7,0,0,664,666,3,18,9,0,665,663,
		1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,668,1,0,0,0,668,670,1,0,0,
		0,669,667,1,0,0,0,670,671,5,4,0,0,671,673,1,0,0,0,672,661,1,0,0,0,672,
		673,1,0,0,0,673,717,1,0,0,0,674,675,5,64,0,0,675,678,5,78,0,0,676,677,
		5,85,0,0,677,679,5,70,0,0,678,676,1,0,0,0,678,679,1,0,0,0,679,680,1,0,
		0,0,680,681,5,3,0,0,681,686,3,18,9,0,682,683,5,7,0,0,683,685,3,18,9,0,
		684,682,1,0,0,0,685,688,1,0,0,0,686,684,1,0,0,0,686,687,1,0,0,0,687,689,
		1,0,0,0,688,686,1,0,0,0,689,690,5,4,0,0,690,691,5,97,0,0,691,703,3,16,
		8,0,692,693,5,3,0,0,693,698,3,18,9,0,694,695,5,7,0,0,695,697,3,18,9,0,
		696,694,1,0,0,0,697,700,1,0,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,701,
		1,0,0,0,700,698,1,0,0,0,701,702,5,4,0,0,702,704,1,0,0,0,703,692,1,0,0,
		0,703,704,1,0,0,0,704,708,1,0,0,0,705,707,3,92,46,0,706,705,1,0,0,0,707,
		710,1,0,0,0,708,706,1,0,0,0,708,709,1,0,0,0,709,717,1,0,0,0,710,708,1,
		0,0,0,711,712,5,39,0,0,712,713,5,3,0,0,713,714,3,64,32,0,714,715,5,4,0,
		0,715,717,1,0,0,0,716,645,1,0,0,0,716,660,1,0,0,0,716,674,1,0,0,0,716,
		711,1,0,0,0,717,97,1,0,0,0,718,719,5,62,0,0,719,720,3,10,5,0,720,99,1,
		0,0,0,721,723,5,45,0,0,722,724,7,15,0,0,723,722,1,0,0,0,723,724,1,0,0,
		0,724,725,1,0,0,0,725,726,5,104,0,0,726,747,3,16,8,0,727,728,5,3,0,0,728,
		733,3,44,22,0,729,730,5,7,0,0,730,732,3,44,22,0,731,729,1,0,0,0,732,735,
		1,0,0,0,733,731,1,0,0,0,733,734,1,0,0,0,734,740,1,0,0,0,735,733,1,0,0,
		0,736,737,5,7,0,0,737,739,3,96,48,0,738,736,1,0,0,0,739,742,1,0,0,0,740,
		738,1,0,0,0,740,741,1,0,0,0,741,743,1,0,0,0,742,740,1,0,0,0,743,744,5,
		4,0,0,744,748,1,0,0,0,745,746,5,31,0,0,746,748,3,110,55,0,747,727,1,0,
		0,0,747,745,1,0,0,0,748,101,1,0,0,0,749,750,5,45,0,0,750,751,5,116,0,0,
		751,763,3,26,13,0,752,753,5,3,0,0,753,758,3,18,9,0,754,755,5,7,0,0,755,
		757,3,18,9,0,756,754,1,0,0,0,757,760,1,0,0,0,758,756,1,0,0,0,758,759,1,
		0,0,0,759,761,1,0,0,0,760,758,1,0,0,0,761,762,5,4,0,0,762,764,1,0,0,0,
		763,752,1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,766,5,31,0,0,766,767,
		3,110,55,0,767,103,1,0,0,0,768,770,5,45,0,0,769,771,5,113,0,0,770,769,
		1,0,0,0,770,771,1,0,0,0,771,772,1,0,0,0,772,773,5,70,0,0,773,774,3,20,
		10,0,774,775,5,88,0,0,775,776,3,16,8,0,776,777,5,3,0,0,777,779,3,18,9,
		0,778,780,3,32,16,0,779,778,1,0,0,0,779,780,1,0,0,0,780,788,1,0,0,0,781,
		782,5,7,0,0,782,784,3,18,9,0,783,785,3,32,16,0,784,783,1,0,0,0,784,785,
		1,0,0,0,785,787,1,0,0,0,786,781,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,
		0,788,789,1,0,0,0,789,791,1,0,0,0,790,788,1,0,0,0,791,800,5,4,0,0,792,
		798,5,119,0,0,793,799,5,94,0,0,794,795,5,53,0,0,795,799,5,87,0,0,796,797,
		5,68,0,0,797,799,5,87,0,0,798,793,1,0,0,0,798,794,1,0,0,0,798,796,1,0,
		0,0,799,801,1,0,0,0,800,792,1,0,0,0,800,801,1,0,0,0,801,105,1,0,0,0,802,
		803,5,45,0,0,803,804,7,16,0,0,804,816,3,22,11,0,805,806,5,3,0,0,806,811,
		3,38,19,0,807,808,5,7,0,0,808,810,3,38,19,0,809,807,1,0,0,0,810,813,1,
		0,0,0,811,809,1,0,0,0,811,812,1,0,0,0,812,814,1,0,0,0,813,811,1,0,0,0,
		814,815,5,4,0,0,815,817,1,0,0,0,816,805,1,0,0,0,816,817,1,0,0,0,817,818,
		1,0,0,0,818,825,5,31,0,0,819,826,3,110,55,0,820,826,3,138,69,0,821,826,
		3,140,70,0,822,826,3,136,68,0,823,826,3,100,50,0,824,826,3,108,54,0,825,
		819,1,0,0,0,825,820,1,0,0,0,825,821,1,0,0,0,825,822,1,0,0,0,825,823,1,
		0,0,0,825,824,1,0,0,0,826,107,1,0,0,0,827,840,5,56,0,0,828,829,7,17,0,
		0,829,841,3,10,5,0,830,831,5,104,0,0,831,833,3,16,8,0,832,834,5,36,0,0,
		833,832,1,0,0,0,833,834,1,0,0,0,834,841,1,0,0,0,835,836,5,70,0,0,836,837,
		3,20,10,0,837,838,5,88,0,0,838,839,3,16,8,0,839,841,1,0,0,0,840,828,1,
		0,0,0,840,830,1,0,0,0,840,835,1,0,0,0,841,109,1,0,0,0,842,850,3,120,60,
		0,843,845,7,18,0,0,844,846,7,19,0,0,845,844,1,0,0,0,845,846,1,0,0,0,846,
		847,1,0,0,0,847,849,3,120,60,0,848,843,1,0,0,0,849,852,1,0,0,0,850,848,
		1,0,0,0,850,851,1,0,0,0,851,111,1,0,0,0,852,850,1,0,0,0,853,861,3,114,
		57,0,854,856,7,18,0,0,855,857,7,19,0,0,856,855,1,0,0,0,856,857,1,0,0,0,
		857,858,1,0,0,0,858,860,3,114,57,0,859,854,1,0,0,0,860,863,1,0,0,0,861,
		859,1,0,0,0,861,862,1,0,0,0,862,113,1,0,0,0,863,861,1,0,0,0,864,865,5,
		104,0,0,865,870,3,16,8,0,866,867,5,7,0,0,867,869,3,16,8,0,868,866,1,0,
		0,0,869,872,1,0,0,0,870,868,1,0,0,0,870,871,1,0,0,0,871,115,1,0,0,0,872,
		870,1,0,0,0,873,875,5,101,0,0,874,876,7,20,0,0,875,874,1,0,0,0,875,876,
		1,0,0,0,876,882,1,0,0,0,877,878,5,82,0,0,878,880,5,167,0,0,879,881,5,165,
		0,0,880,879,1,0,0,0,880,881,1,0,0,0,881,883,1,0,0,0,882,877,1,0,0,0,882,
		883,1,0,0,0,883,884,1,0,0,0,884,889,3,50,25,0,885,886,5,7,0,0,886,888,
		3,50,25,0,887,885,1,0,0,0,888,891,1,0,0,0,889,887,1,0,0,0,889,890,1,0,
		0,0,890,117,1,0,0,0,891,889,1,0,0,0,892,893,3,116,58,0,893,894,5,75,0,
		0,894,911,3,16,8,0,895,899,3,126,63,0,896,898,3,128,64,0,897,896,1,0,0,
		0,898,901,1,0,0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,903,1,0,0,0,901,
		899,1,0,0,0,902,904,3,130,65,0,903,902,1,0,0,0,903,904,1,0,0,0,904,906,
		1,0,0,0,905,907,3,132,66,0,906,905,1,0,0,0,906,907,1,0,0,0,907,909,1,0,
		0,0,908,910,3,134,67,0,909,908,1,0,0,0,909,910,1,0,0,0,910,912,1,0,0,0,
		911,895,1,0,0,0,911,912,1,0,0,0,912,119,1,0,0,0,913,930,3,116,58,0,914,
		918,3,126,63,0,915,917,3,128,64,0,916,915,1,0,0,0,917,920,1,0,0,0,918,
		916,1,0,0,0,918,919,1,0,0,0,919,922,1,0,0,0,920,918,1,0,0,0,921,923,3,
		130,65,0,922,921,1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,926,3,132,
		66,0,925,924,1,0,0,0,925,926,1,0,0,0,926,928,1,0,0,0,927,929,3,134,67,
		0,928,927,1,0,0,0,928,929,1,0,0,0,929,931,1,0,0,0,930,914,1,0,0,0,930,
		931,1,0,0,0,931,121,1,0,0,0,932,938,3,30,15,0,933,934,5,71,0,0,934,935,
		5,35,0,0,935,939,3,20,10,0,936,937,5,86,0,0,937,939,5,71,0,0,938,933,1,
		0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,989,1,0,0,0,940,941,3,16,8,0,
		941,942,5,3,0,0,942,947,3,64,32,0,943,944,5,7,0,0,944,946,3,64,32,0,945,
		943,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,947,948,1,0,0,0,948,950,1,
		0,0,0,949,947,1,0,0,0,950,955,5,4,0,0,951,953,5,31,0,0,952,951,1,0,0,0,
		952,953,1,0,0,0,953,954,1,0,0,0,954,956,3,28,14,0,955,952,1,0,0,0,955,
		956,1,0,0,0,956,989,1,0,0,0,957,958,5,3,0,0,958,963,3,122,61,0,959,960,
		5,7,0,0,960,962,3,122,61,0,961,959,1,0,0,0,962,965,1,0,0,0,963,961,1,0,
		0,0,963,964,1,0,0,0,964,969,1,0,0,0,965,963,1,0,0,0,966,968,3,128,64,0,
		967,966,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,970,1,0,0,0,970,972,
		1,0,0,0,971,969,1,0,0,0,972,977,5,4,0,0,973,975,5,31,0,0,974,973,1,0,0,
		0,974,975,1,0,0,0,975,976,1,0,0,0,976,978,3,28,14,0,977,974,1,0,0,0,977,
		978,1,0,0,0,978,989,1,0,0,0,979,980,5,3,0,0,980,981,3,110,55,0,981,986,
		5,4,0,0,982,984,5,31,0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,
		0,985,987,3,28,14,0,986,983,1,0,0,0,986,987,1,0,0,0,987,989,1,0,0,0,988,
		932,1,0,0,0,988,940,1,0,0,0,988,957,1,0,0,0,988,979,1,0,0,0,989,123,1,
		0,0,0,990,1009,3,30,15,0,991,992,5,3,0,0,992,997,3,124,62,0,993,994,5,
		7,0,0,994,996,3,124,62,0,995,993,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,
		0,997,998,1,0,0,0,998,1003,1,0,0,0,999,997,1,0,0,0,1000,1002,3,128,64,
		0,1001,1000,1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,
		0,0,1004,1006,1,0,0,0,1005,1003,1,0,0,0,1006,1007,5,4,0,0,1007,1009,1,
		0,0,0,1008,990,1,0,0,0,1008,991,1,0,0,0,1009,125,1,0,0,0,1010,1011,5,65,
		0,0,1011,1016,3,122,61,0,1012,1013,5,7,0,0,1013,1015,3,122,61,0,1014,1012,
		1,0,0,0,1015,1018,1,0,0,0,1016,1014,1,0,0,0,1016,1017,1,0,0,0,1017,1020,
		1,0,0,0,1018,1016,1,0,0,0,1019,1021,3,130,65,0,1020,1019,1,0,0,0,1020,
		1021,1,0,0,0,1021,127,1,0,0,0,1022,1024,7,21,0,0,1023,1025,5,91,0,0,1024,
		1023,1,0,0,0,1024,1025,1,0,0,0,1025,1028,1,0,0,0,1026,1028,5,72,0,0,1027,
		1022,1,0,0,0,1027,1026,1,0,0,0,1028,1029,1,0,0,0,1029,1030,5,77,0,0,1030,
		1033,3,122,61,0,1031,1032,5,88,0,0,1032,1034,3,64,32,0,1033,1031,1,0,0,
		0,1033,1034,1,0,0,0,1034,129,1,0,0,0,1035,1036,5,118,0,0,1036,1037,3,64,
		32,0,1037,131,1,0,0,0,1038,1039,5,66,0,0,1039,1040,5,35,0,0,1040,1045,
		3,64,32,0,1041,1042,5,7,0,0,1042,1044,3,64,32,0,1043,1041,1,0,0,0,1044,
		1047,1,0,0,0,1045,1043,1,0,0,0,1045,1046,1,0,0,0,1046,1050,1,0,0,0,1047,
		1045,1,0,0,0,1048,1049,5,67,0,0,1049,1051,3,64,32,0,1050,1048,1,0,0,0,
		1050,1051,1,0,0,0,1051,133,1,0,0,0,1052,1053,5,90,0,0,1053,1054,5,35,0,
		0,1054,1059,3,34,17,0,1055,1056,5,7,0,0,1056,1058,3,34,17,0,1057,1055,
		1,0,0,0,1058,1061,1,0,0,0,1059,1057,1,0,0,0,1059,1060,1,0,0,0,1060,135,
		1,0,0,0,1061,1059,1,0,0,0,1062,1063,5,73,0,0,1063,1064,5,75,0,0,1064,1076,
		3,16,8,0,1065,1066,5,3,0,0,1066,1071,3,18,9,0,1067,1068,5,7,0,0,1068,1070,
		3,18,9,0,1069,1067,1,0,0,0,1070,1073,1,0,0,0,1071,1069,1,0,0,0,1071,1072,
		1,0,0,0,1072,1074,1,0,0,0,1073,1071,1,0,0,0,1074,1075,5,4,0,0,1075,1077,
		1,0,0,0,1076,1065,1,0,0,0,1076,1077,1,0,0,0,1077,1091,1,0,0,0,1078,1079,
		5,115,0,0,1079,1080,5,3,0,0,1080,1085,3,64,32,0,1081,1082,5,7,0,0,1082,
		1084,3,64,32,0,1083,1081,1,0,0,0,1084,1087,1,0,0,0,1085,1083,1,0,0,0,1085,
		1086,1,0,0,0,1086,1088,1,0,0,0,1087,1085,1,0,0,0,1088,1089,5,4,0,0,1089,
		1092,1,0,0,0,1090,1092,3,120,60,0,1091,1078,1,0,0,0,1091,1090,1,0,0,0,
		1092,137,1,0,0,0,1093,1094,5,114,0,0,1094,1099,3,124,62,0,1095,1096,5,
		7,0,0,1096,1098,3,124,62,0,1097,1095,1,0,0,0,1098,1101,1,0,0,0,1099,1097,
		1,0,0,0,1099,1100,1,0,0,0,1100,1105,1,0,0,0,1101,1099,1,0,0,0,1102,1104,
		3,128,64,0,1103,1102,1,0,0,0,1104,1107,1,0,0,0,1105,1103,1,0,0,0,1105,
		1106,1,0,0,0,1106,1108,1,0,0,0,1107,1105,1,0,0,0,1108,1109,5,102,0,0,1109,
		1110,3,48,24,0,1110,1111,5,23,0,0,1111,1119,3,64,32,0,1112,1113,5,7,0,
		0,1113,1114,3,48,24,0,1114,1115,5,23,0,0,1115,1116,3,64,32,0,1116,1118,
		1,0,0,0,1117,1112,1,0,0,0,1118,1121,1,0,0,0,1119,1117,1,0,0,0,1119,1120,
		1,0,0,0,1120,1124,1,0,0,0,1121,1119,1,0,0,0,1122,1123,5,118,0,0,1123,1125,
		3,64,32,0,1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,139,1,0,0,0,1126,1134,
		5,51,0,0,1127,1129,5,55,0,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,1132,
		1,0,0,0,1130,1133,3,46,23,0,1131,1133,5,8,0,0,1132,1130,1,0,0,0,1132,1131,
		1,0,0,0,1133,1135,1,0,0,0,1134,1128,1,0,0,0,1134,1135,1,0,0,0,1135,1136,
		1,0,0,0,1136,1137,5,65,0,0,1137,1142,3,124,62,0,1138,1139,5,7,0,0,1139,
		1141,3,124,62,0,1140,1138,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,0,0,0,
		1142,1143,1,0,0,0,1143,1148,1,0,0,0,1144,1142,1,0,0,0,1145,1147,3,128,
		64,0,1146,1145,1,0,0,0,1147,1150,1,0,0,0,1148,1146,1,0,0,0,1148,1149,1,
		0,0,0,1149,1153,1,0,0,0,1150,1148,1,0,0,0,1151,1152,5,118,0,0,1152,1154,
		3,64,32,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,141,1,0,0,0,1155,1156,
		5,96,0,0,1156,1165,3,22,11,0,1157,1162,3,38,19,0,1158,1159,5,7,0,0,1159,
		1161,3,38,19,0,1160,1158,1,0,0,0,1161,1164,1,0,0,0,1162,1160,1,0,0,0,1162,
		1163,1,0,0,0,1163,1166,1,0,0,0,1164,1162,1,0,0,0,1165,1157,1,0,0,0,1165,
		1166,1,0,0,0,1166,143,1,0,0,0,1167,1168,5,92,0,0,1168,1173,3,38,19,0,1169,
		1170,5,7,0,0,1170,1172,3,38,19,0,1171,1169,1,0,0,0,1172,1175,1,0,0,0,1173,
		1171,1,0,0,0,1173,1174,1,0,0,0,1174,145,1,0,0,0,1175,1173,1,0,0,0,1176,
		1203,3,84,42,0,1177,1203,3,86,43,0,1178,1203,3,88,44,0,1179,1203,3,104,
		52,0,1180,1203,3,100,50,0,1181,1203,3,106,53,0,1182,1203,3,142,71,0,1183,
		1203,3,102,51,0,1184,1203,3,140,70,0,1185,1203,3,108,54,0,1186,1203,3,
		136,68,0,1187,1203,3,90,45,0,1188,1203,3,110,55,0,1189,1203,3,112,56,0,
		1190,1203,3,118,59,0,1191,1203,3,138,69,0,1192,1203,3,144,72,0,1193,1203,
		3,68,34,0,1194,1203,3,70,35,0,1195,1203,3,72,36,0,1196,1203,3,74,37,0,
		1197,1203,3,76,38,0,1198,1203,3,78,39,0,1199,1203,3,80,40,0,1200,1203,
		3,82,41,0,1201,1203,3,98,49,0,1202,1176,1,0,0,0,1202,1177,1,0,0,0,1202,
		1178,1,0,0,0,1202,1179,1,0,0,0,1202,1180,1,0,0,0,1202,1181,1,0,0,0,1202,
		1182,1,0,0,0,1202,1183,1,0,0,0,1202,1184,1,0,0,0,1202,1185,1,0,0,0,1202,
		1186,1,0,0,0,1202,1187,1,0,0,0,1202,1188,1,0,0,0,1202,1189,1,0,0,0,1202,
		1190,1,0,0,0,1202,1191,1,0,0,0,1202,1192,1,0,0,0,1202,1193,1,0,0,0,1202,
		1194,1,0,0,0,1202,1195,1,0,0,0,1202,1196,1,0,0,0,1202,1197,1,0,0,0,1202,
		1198,1,0,0,0,1202,1199,1,0,0,0,1202,1200,1,0,0,0,1202,1201,1,0,0,0,1203,
		147,1,0,0,0,1204,1206,5,1,0,0,1205,1204,1,0,0,0,1206,1209,1,0,0,0,1207,
		1205,1,0,0,0,1207,1208,1,0,0,0,1208,1210,1,0,0,0,1209,1207,1,0,0,0,1210,
		1219,3,146,73,0,1211,1213,5,1,0,0,1212,1211,1,0,0,0,1213,1214,1,0,0,0,
		1214,1212,1,0,0,0,1214,1215,1,0,0,0,1215,1216,1,0,0,0,1216,1218,3,146,
		73,0,1217,1212,1,0,0,0,1218,1221,1,0,0,0,1219,1217,1,0,0,0,1219,1220,1,
		0,0,0,1220,1225,1,0,0,0,1221,1219,1,0,0,0,1222,1224,5,1,0,0,1223,1222,
		1,0,0,0,1224,1227,1,0,0,0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,149,
		1,0,0,0,1227,1225,1,0,0,0,1228,1230,3,148,74,0,1229,1228,1,0,0,0,1229,
		1230,1,0,0,0,1230,1231,1,0,0,0,1231,1232,5,0,0,1,1232,151,1,0,0,0,148,
		184,197,219,222,228,232,235,244,258,260,265,270,273,276,287,297,299,303,
		306,333,342,351,355,362,366,383,388,416,426,429,435,441,443,445,455,459,
		475,488,498,503,512,519,532,544,556,573,583,590,596,598,602,606,610,617,
		628,633,641,653,658,667,672,678,686,698,703,708,716,723,733,740,747,758,
		763,770,779,784,788,798,800,811,816,825,833,840,845,850,856,861,870,875,
		880,882,889,899,903,906,909,911,918,922,925,928,930,938,947,952,955,963,
		969,974,977,983,986,988,997,1003,1008,1016,1020,1024,1027,1033,1045,1050,
		1059,1071,1076,1085,1091,1099,1105,1119,1124,1128,1132,1134,1142,1148,
		1153,1162,1165,1173,1202,1207,1214,1219,1225,1229
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
